#INCLUDE LLMIME_Effects
#INCLUDE LLMIME_Skills
#INCLUDE LLMIME_Statuses
#INCLUDE LLMIME_Mime_Passives

INIT
	LIST<STATUS>:%LLMIME_PassiveStatuses
	FLOAT:%LLMIME_StatusStrength = 999
	FLOAT:%LLMIME_StatusStrengthRemoval = 1000
	EXTERN FLOAT:%LLMIME_SourceRegenMinimumLevel = 10
	EXTERN INT:%LLMIME_SourceRegenDuration = 10
	
	USING LLMIME_Effects
	USING LLMIME_Skills
	USING LLMIME_Statuses
	USING LLMIME_Mime_Passives
EVENTS

EVENT LLMIME_InitStatusList
VARS
	INT:_ListSize
ON
	OnActivate()
	OnFunction("Mimicry_InitStatusList")
ACTIONS
IF "!c1|(c1&c2)"
	ListGetSize(%LLMIME_PassiveStatuses, _ListSize)
	IsLessThen(_ListSize, 4)
THEN
	ListClear(%LLMIME_PassiveStatuses)
	ListAdd(%LLMIME_PassiveStatuses, LLMIME_MIME)
	ListAdd(%LLMIME_PassiveStatuses, LLMIME_BEASTMASTER)
	ListAdd(%LLMIME_PassiveStatuses, LLMIME_BRAWLER)
	ListAdd(%LLMIME_PassiveStatuses, LLMIME_CONCENTRATION)
ENDIF

EVENT LLMIME_LeaderLib_InitEvent
ON
	OnItemEvent(_, "LeaderLib_Initialized")
ACTIONS
	CallFunction("Mimicry_InitStatusList")
	IterateCharacters("LLMIME_Iterator_CheckUnarmed", null, null, "Mimicry_Mime")

EVENT LLMIME_Mime_InitIterate
VARS
	CHARACTER:_Mime
ON
	OnIterateCharacter(_Mime, "LLMIME_Iterator_CheckUnarmed")
ACTIONS
	CharacterEvent(_Mime, "Mimicry_MimeInitialized")
	
EVENT LLMIME_CheckMaskWearers
ON
	OnItemEvent(_, "LeaderLib_Events_OnDefaultEventFlowComplete")
ACTIONS
	IterateCharacters("LLMIME_Iterator_InitMime", null, null, "Mimicry_WearingMask")

EVENT LLMIME_MaskWearers_InitMimeJob
VARS
	CHARACTER:_Mime
ON
	OnIterateCharacter(_Mime, "LLMIME_Iterator_InitMime")
ACTIONS
	CharacterEvent(_Mime, "Mimicry_InitMimeJob")

EVENT LLMIME_MimeSetup
VARS
	CHARACTER:_Mime
	INT:_Size
	INT:_Index
	STATUS:_Status
	STRING:_Message
	INT:_Turns
ON
	OnCharacterEvent(_Mime, "Mimicry_InitMimeJob")
ACTIONS
	CallFunction("Mimicry_InitStatusList")
IF "!c1"
	IsTagged(_Mime, "Mimicry_Mime")
THEN
	SetVar(_Mime, "LeaderLog_Message", STRING:"[Mimicry:LLMIME_Main:MimeSetup] Setting mime tag and statuses.")
	CharacterEvent(_Mime, "LeaderLog_Commands_Log")
	SetTag(_Mime, "Mimicry_Mime")
ENDIF
	CharacterEvent(_Mime, "Mimicry_ApplySourceRegen")
	Set(_Index, 1)
IF "c1"
	ListGetSize(%LLMIME_PassiveStatuses, _Size)
THEN
	WHILE "!c1"
		IsGreaterThen(_Index,_Size)
	DO
		IF "c1"
			ListGet(%LLMIME_PassiveStatuses,_Index,_Status)
		THEN
			//RemoveStatusInfluence(_Mime, _Status, %LLMIME_StatusStrengthRemoval, "", 0)
			//AddStatusInfluence(_Mime, _Status, %LLMIME_StatusStrength, "", 0, 1)
			
			IF "!c1|(c2&!c3)"
				CharacterHasStatus(_Mime, _Status)
				GetStatusTurns(_Mime, _Status, _Turns)
				IsEqual(_Turns, -1)
			THEN
				CharacterApplyStatus(_Mime, _Status, -1, 1)
			ENDIF
			
		ENDIF
	Add(_Index, 1)
	ENDWHILE
ENDIF
	CharacterEvent(_Mime, "Mimicry_MimeInitialized")
	
	/*
	Print(_Message, "[LLMIME:LLMIME_Main:Mime_Setup] Status list: Size([1]).", _Size)
	SetVar(_Mime, "LeaderLib_LogMessage", _Message)
	CharacterEvent(_Mime, "LeaderLib_DebugLog")
	*/

EVENT LLMIME_RemoveMimeStatusInfluences
VARS
	CHARACTER:_Mime
	INT:_Size
	INT:_Index
	STATUS:_Status
ON
	OnCharacterEvent(_Mime, "Mimicry_RemoveMimeStatusInfluences")
ACTIONS
	Set(_Index, 1)
IF "c1"
	ListGetSize(%LLMIME_PassiveStatuses, _Size)
THEN
	WHILE "!c1"
		IsGreaterThen(_Index,_Size)
	DO
		IF "c1"
			ListGet(%LLMIME_PassiveStatuses,_Index,_Status)
		THEN
			IF "!c1"
				HasStatusInfluence(_Mime, _Status)
			THEN
				RemoveStatusInfluence(_Mime, _Status, %LLMIME_StatusStrengthRemoval, "", 0)
			ENDIF
		ENDIF
	Add(_Index, 1)
	ENDWHILE
ENDIF

EVENT LLMIME_RemoveMimeStatuses
VARS
	CHARACTER:_Mime
	INT:_Size
	INT:_Index
	STATUS:_Status
ON
	OnCharacterEvent(_Mime, "Mimicry_RemoveMimeStatuses")
ACTIONS
	Set(_Index, 1)
IF "c1"
	ListGetSize(%LLMIME_PassiveStatuses, _Size)
THEN
	WHILE "!c1"
		IsGreaterThen(_Index,_Size)
	DO
		IF "c1"
			ListGet(%LLMIME_PassiveStatuses,_Index,_Status)
		THEN
			CharacterRemoveStatus(_Mime, _Status, null, 0)
		ENDIF
	Add(_Index, 1)
	ENDWHILE
ENDIF

EVENT LLMIME_MimeRemoval
VARS
	CHARACTER:_Mime
ON
	OnCharacterEvent(_Mime, "Mimicry_RemoveMimeJob")
ACTIONS
	ClearTag(_Mime, "Mimicry_Mime")
	//CharacterEvent(_Mime, "Mimicry_RemoveMimeStatusInfluences")
	CharacterEvent(_Mime, "Mimicry_ClearMimeBonuses")
	CharacterEvent(_Mime, "Mimicry_MimeJobRemoved")
	CharacterRemoveStatus(_Mime, LLMIME_SOURCE_REGENERATION_HIDDEN, null, 0)
	
EVENT LLMIME_Apply_Mimicking_Start
ON
	OnGlobalFlagSet("Mimicry_Mimic_CombatOnlyDisabled")
ACTIONS
	IterateCharacters("LLMIME_Iterator_RequestMimicking", null, null, "Mimicry_Mime")
	//CharacterApplyStatus(LLMIME_MimeCompanion_ElfMale_3f625a37-59d0-41b5-81df-695abd2975e9, LLMIME_MIMICKING, -1)

EVENT LLMIME_Apply_Mimicking
VARS
	CHARACTER:_Mime
ON
	OnIterateCharacter(_Mime, "LLMIME_Iterator_RequestMimicking")
ACTIONS
	CharacterEvent(_Mime, "LLMIME_Events_RequestMimicking")
	
EVENT LLMIME_Apply_Mimicking_CombatEnded
VARS
	CHARACTER:_Mime
ON
	OnLeftCombat(_Mime, _)
ACTIONS
IF "c1"
	HasGlobalFlag("Mimicry_Mimic_CombatOnlyDisabled")
THEN
	CharacterEvent(_Mime, "LLMIME_Events_RequestMimicking")
ENDIF

EVENT LLMIME_Remove_Mimicking_Start
ON
	OnGlobalFlagCleared("Mimicry_Mimic_CombatOnlyDisabled")
ACTIONS
	IterateCharacters("LLMIME_Iterator_RemoveMimicking", null, null, "Mimicry_Mime")

EVENT LLMIME_Remove_Mimicking
VARS
	CHARACTER:_Mime
ON
	OnIterateCharacter(_Mime, "LLMIME_Iterator_RemoveMimicking")
ACTIONS
IF "!c1|c2|c3"
	IsInCombat(_Mime)
	IsInActiveTurn(_Mime)
	CharacterHasStatus(_Mime, LLMIME_MIMICKING_DISABLED)
THEN
	CharacterEvent(_Mime, "LLMIME_Events_RemoveMimicking")
ENDIF

EVENT LLMIME_CanSeeAttackTarget_Character
VARS
	CHARACTER:_Mime
	CHARACTER:_Target
ON
	OnCharacterCharacterEvent(_Mime, _Target, "LLMIME_Events_Mimicking_CheckAttackTarget")
ACTIONS
	CharacterCharacterEvent(_Mime, _Target, "LLMIME_Events_Mimicking_UseBasicAttackSkillOnTarget")
/*
IF "(c1&c2)|(!c3&c4)"
	CharacterHasRangedWeapon(_Mime)
	CharacterCanHitTargetWithRangedWeapon(_Mime, _Target)
	CharacterHasRangedWeapon(_Mime)
	CharacterInWeaponRange(_Mime, _Target)
THEN
	CharacterCharacterEvent(_Mime, _Target, "LLMIME_Events_Mimicking_UseBasicAttackOnTarget")
ELSE
	CharacterCharacterEvent(_Mime, _Target, "LLMIME_Events_Mimicking_UseBasicAttackSkillOnTarget")
ENDIF
*/
EVENT LLMIME_CanSeeAttackTarget_Item
VARS
	CHARACTER:_Mime
	ITEM:_Target
	FLOAT:_MaxRange
	FLOAT:_Dist
ON
	OnCharacterItemEvent(_Mime, _Target, "LLMIME_Events_Mimicking_CheckAttackTarget")
ACTIONS
	CharacterItemEvent(_Mime, _Target, "LLMIME_Events_Mimicking_UseBasicAttackSkillOnTarget")
/*
IF "(c1&c2)|(!c3&c4&c5&(c6|c7))"
	CharacterHasRangedWeapon(_Mime)
	CharacterCanHitTargetWithRangedWeapon(_Mime, _Target)
	CharacterHasRangedWeapon(_Mime)
	CharacterGetWeaponRange(_, _MaxRange, _Mime)
	GetInnerDistance(_Dist, _Mime, _Target)
	IsLessThen(_Dist, _MaxRange)
	IsEqual(_Dist, _MaxRange)
THEN
	CharacterItemEvent(_Mime, _Target, "LLMIME_Events_Mimicking_UseBasicAttackOnTarget")
ELSE
	CharacterItemEvent(_Mime, _Target, "LLMIME_Events_Mimicking_UseBasicAttackSkillOnTarget")
ENDIF
*/

EVENT LLMIME_Dummy_Iterate_NearbyItems
VARS
	CHARACTER:_Dummy
	FIXEDSTRING:_EventName
	FLOAT:_Radius
ON
	OnCharacterEvent(_Dummy, "LLMIME_Events_StartDummyItemIterator")
ACTIONS
IF "c1&c2"
	GetVar(_Radius, _Dummy, "LLMIME_Dummy_IterationRange")
	GetVar(_EventName, _Dummy, "LLMIME_Dummy_IterationEvent")
	//IsEqual(_EventName, %EmptyFixedStr)
THEN
	IterateItemsNear(_Dummy, _Radius, _EventName)
	SetVar(_Dummy, "LLMIME_Dummy_IterationEvent", FIXEDSTRING:"")
ENDIF

EVENT LLMIME_Dummy_OnIterate
VARS
	ITEM:_Item
	FIXEDSTRING:_EventName
	STRING:_EventNameStr
ON
	OnIterateItem(_Item, _EventName)
ACTIONS
	Cast(_EventNameStr, _EventName)
	ItemEvent(_Item, _EventNameStr)
	
EVENT LLMIME_Mime_ApplySourceRegen
VARS
	CHARACTER:_Mime
	FLOAT:_Level
ON
	OnCharacterStatusRemoved(_Mime, LLMIME_SOURCE_REGENERATION_HIDDEN)
	OnCharacterEvent(_Mime, "Mimicry_MimeLeveledUp")
	OnCharacterEvent(_Mime, "Mimicry_ApplySourceRegen")
ACTIONS
IF "c1&!c2&c3&(c4|c5)"
	IsTagged(_Mime, "Mimicry_Mime")
	CharacterHasStatus(_Mime, LLMIME_SOURCE_REGENERATION_HIDDEN)
	CharacterGetStat(_Level, _Mime, Level)
	IsGreaterThen(_Level, %LLMIME_SourceRegenMinimumLevel)
	IsEqual(_Level, %LLMIME_SourceRegenMinimumLevel)
THEN
	CharacterApplyStatus(_Mime, LLMIME_SOURCE_REGENERATION_HIDDEN, %LLMIME_SourceRegenDuration, 0)
ENDIF

EVENT LLMIME_Mime_Combat_Muted_Apply
VARS
	CHARACTER:_Mime
ON
	OnEnteredCombat(_Mime, _)
ACTIONS
IF "c1&!c2"
	IsTagged(_Mime, "Mimicry_Mime")
	HasFlag(_Mime, "Mimicry_CombatMuteDisabled")
THEN
	CharacterApplyStatus(_Mime, LLMIME_COMBAT_MUTED, -1, 1)
ENDIF

EVENT LLMIME_Mime_Combat_Muted_Apply_Resurrected
VARS
	CHARACTER:_Mime
ON
	OnCharacterStatusRemoved(_Mime, RESURRECT)
ACTIONS
IF "!c1&c2&!c3&c4"
	HasFlag(_Mime, "Mimicry_CombatMuteDisabled")
	IsTagged(_Mime, "Mimicry_Mime")
	CharacterHasStatus(_Mime, LLMIME_COMBAT_MUTED)
	IsInCombat(_Mime)
THEN
	CharacterApplyStatus(_Mime, LLMIME_COMBAT_MUTED, -1, 1)
ENDIF
	
EVENT LLMIME_Mime_Combat_Muted_Remove
VARS
	CHARACTER:_Mime
ON
	OnLeftCombat(_Mime, _)
ACTIONS
IF "c1|c2"
	CharacterHasStatus(_Mime, LLMIME_COMBAT_MUTED)
	CharacterHasHadStatus(_Mime, LLMIME_COMBAT_MUTED)
THEN
	//Make it "cool down" instead of removing it immediately, for fleeing situations
	CharacterApplyStatus(_Mime, LLMIME_COMBAT_MUTED, 1, 1)
ENDIF

EVENT LLMIME_Mime_Combat_SkillMimicAP
VARS
	CHARACTER:_Mime
	FLOAT:_CurrentAP
	FLOAT:_APStart
	FLOAT:_APRec
	FLOAT:_TargetAP
	INT:_APBonus
	STRING:_LogMessage
ON
	OnCharacterEvent(_Mime, "Mimicry_Events_CheckMimickingAP")
ACTIONS
IF "c1&c2&c3&c4"
	IsTagged(_Mime, "Mimicry_Mime")
	CharacterGetStat(_CurrentAP, _Mime, ActionPoints)
	CharacterGetStat(_APStart, _Mime, APStart)
	CharacterGetStat(_APRec, _Mime, APRecovery)
THEN
	Set(_TargetAP, _APStart)
	Add(_TargetAP, _APRec)
	IF "c1"
		IsLessThen(_CurrentAP, _TargetAP)
	THEN
		Cast(_APBonus, _TargetAP)
		Subtract(_APBonus, _CurrentAP)
		IF "c1"
			IsGreaterThen(_APBonus, 0)
		THEN
			CharacterAddActionPoints(_Mime, _APBonus)
			IF "c1"
				HasGlobalFlag("LeaderLog_Debug_Enabled")
			THEN
				Print(_LogMessage, "[Mimicry:MainGameScript:MimeAP] Added ([1]) AP to Mime after mimicking. Current([2]) APStart([3]) APRecovery([4])", _APBonus, _CurrentAP, _APStart, _APRec)
				SetVar(_Mime, "LeaderLog_Message", _LogMessage)
				CharacterEvent(_Mime, "LeaderLog_Commands_Log")
			ENDIF
		ENDIF
	ENDIF
ENDIF

//REGION DEBUG
/*
EVENT LLMIME_TestSurfaceFinder
VARS
    CHARACTER:_Character
    FLOAT3:_Pos
    INT:_Size
    INT:_SurfaceCount
    FLOAT:_Radius
    FLOAT:_Sizef
	STRING:_Str
	FIXEDSTRING:_Msg
ON
    OnSkillCast(_Character, Target_EnemyFortify)
ACTIONS
	//CreateSurfaceAt(_Character, SurfaceWater, 5.0, 0)
	Set(_SurfaceCount, INT:0)
	Set(_Radius, FLOAT:3.0)
WHILE "c1"
	IsLessThen(_SurfaceCount, INT:2)
DO
	IF "c1&c2"
		FindSurface(_Pos, _Character, 0.0, _Radius, SurfaceWater)
		GetSurfaceSize(_Pos, 0, _Size)
	THEN
		Print(_Str, "Cell Size = [1]", _Size)
		Cast(_Msg, _Str)
		DisplayCombatInfoText(_Character, _Msg, 1.0)
		Divide(_Radius, _Size)
		Cast(_Sizef, _Size)
		Multiply(_Sizef, _Radius)
		CreateSurfaceAt(_Pos, SurfaceNone, _Sizef, 0)
		CreateSurfaceAt(_Pos, SurfaceFirePurified, _Sizef, 3)
		Print(_Str, "Surface Size? = [1]", _Sizef)
		Cast(_Msg, _Str)
		DisplayCombatInfoText(_Character, _Msg, 5.0)
	ENDIF
	Add(_SurfaceCount, 1)
ENDWHILE
*/

/*
EVENT LLMIME_Debug_TraceWeaponStat
VARS
	CHARACTER:_Char
	ITEM:_MainWeapon
	FIXEDSTRING:_ItemType
	ITEMTEMPLATE:_Template
	STRING:_Message
ON
	OnCharacterStartAttackPosition(_, _, _Char)
	OnCharacterStartAttackObject(_, _, _, _Char)
ACTIONS
IF "c1&c2&(c3|c4)"
	HasGlobalFlag("LeaderLog_Debug_Enabled")
	CharacterGetEquippedItem(_Char, "Weapon", _MainWeapon)
	ItemGetItemType(_MainWeapon, _ItemType)
	ItemGetTemplate(_MainWeapon, _Template)
THEN
	Print(_Message, "[Mimicry:MainGameScript:WeaponStat] Type([1]) Template([2])", _ItemType, _Template)
	SetVar(_Char, "LeaderLog_Message", _Message)
	CharacterEvent(_Char, "LeaderLog_Commands_Log")
ENDIF
*/

//END_REGION