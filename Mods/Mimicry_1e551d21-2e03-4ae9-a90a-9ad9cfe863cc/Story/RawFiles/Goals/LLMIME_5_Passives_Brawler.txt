Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_Brawler_InitSettings();
//DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target)
//DB_LLMIME_Brawler_SpawnedFist(_Mime, _Fist)
//DB_LLMIME_Brawler_JustToggledStance(_Mime)
KBSECTION
PROC
LLMIME_Brawler_InitSettings()
THEN
DB_LLMIME_Brawler_StanceStatuses("LLMIME_BRAWLER_STANCE_CON", "LLMIME_BrawlerStance_UseCon");
DB_LLMIME_Brawler_StanceStatuses("LLMIME_BRAWLER_STANCE_STR", "LLMIME_BrawlerStance_UseStr");
DB_LLMIME_Brawler_StanceStatuses("LLMIME_BRAWLER_STANCE_FIN", "LLMIME_BrawlerStance_UseFin");

IF
CharacterStartAttackObject(_Target, _Owner, _Attacker)
AND
HasActiveStatus(_Attacker, "LLMIME_MIME", 1)
AND
ObjectGetFlag(_Attacker, "LLMIME_UNARMED", 1)
THEN
DB_NOOP(1);

IF
AttackedByObject(_Target, _Owner, (CHARACTERGUID)_Mime, _DamageType, _DamageSource)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Mime:AttackedByObject] Mime attacked something. DamageType[",_DamageType,"] DamageSource[",_DamageSource,"].");

IF
CharacterReceivedDamage(_Target, _Percentage, (CHARACTERGUID)_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
AND
IntegertoString(_Percentage, _DamageStr)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Mime:CharacterReceivedDamage] Mime did [",_DamageStr,"]% damage. Whatever that means.");

//REGION BRAWLER_STANCE_PREFERENCE_SET
PROC
LLMIME_Brawler_SetStancePreference((CHARACTERGUID)_Mime, (STRING)_Flag)
AND
NOT ObjectGetFlag(_Mime, _Flag, 1)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _SettingsFlag)
THEN
ObjectClearFlag(_Mime, _SettingsFlag);

PROC
LLMIME_Brawler_SetStancePreference((CHARACTERGUID)_Mime, (STRING)_Flag)
AND
NOT ObjectGetFlag(_Mime, _Flag, 1)
THEN
ObjectSetFlag(_Mime, _Flag);
LLMIME_Brawler_RemoveStance(_Mime);
LLMIME_Brawler_ApplyStance(_Mime);

QRY
LLMIME_Brawler_QRY_StancePreferenceSet((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
ObjectGetFlag(_Mime, _Flag, 1)
THEN
DB_NOOP(1);

IF
CharacterUsedSkill(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT LLMIME_Brawler_QRY_StancePreferenceSet(_Mime)
THEN
ObjectSetFlag(_Mime, "LLMIME_BrawlerStance_UseCon"); // Default
//END_REGION

//REGION BRAWLER_STANCE_TOGGLE
QRY
LLMIME_Brawler_QRY_StanceIsActive((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
HasActiveStatus(_Mime, _Status, 1)
THEN
DB_NOOP(1);

IF
SkillCast(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime)
AND
NOT LLMIME_Brawler_QRY_StanceIsActive(_Mime)
THEN
LLMIME_Brawler_ApplyStance(_Mime);
DB_LLMIME_Brawler_JustToggledStance(_Mime);

IF
SkillCast(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime)
AND
LLMIME_Brawler_QRY_StanceIsActive(_Mime)
THEN
LLMIME_Brawler_RemoveStance(_Mime);
DB_LLMIME_Brawler_JustToggledStance(_Mime);

IF
SkillCast(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
DB_LLMIME_Brawler_JustToggledStance(_Mime)
THEN
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime);

PROC
LLMIME_Brawler_ApplyStance((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
ObjectGetFlag(_Mime, _Flag, 1)
AND
HasActiveStatus(_Mime, _Status, 0)
THEN
ApplyStatus(_Mime, _Status, -1.0, 1);
//END_REGION

//REGION BRAWLER_STANCE_REMOVAL
IF
ItemUnEquipped(_Item, _Mime)
AND
IsTagged(_Item, "LLMIME_BrawlerFist", 1)
THEN
LLMIME_Brawler_RemoveStance(_Mime);

PROC
LLMIME_Brawler_RemoveStance((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
HasActiveStatus(_Mime, _Status, 1)
THEN
RemoveStatus(_Mime, _Status);
//END_REGION

//REGION DAMAGE_TYPE_MATCHING
QRY
LLMIME_Brawler_QRY_DamageTypeMatches((CHARACTERGUID)_Mime, (STRING)_DamageType)
THEN
DB_NOOP(1);
//END_REGION

//REGION BONUS_DAMAGE
IF
AttackedByObject(_Target, _Owner, (CHARACTERGUID)_Mime, _DamageType, "Attack")
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
LLMIME_QRY_MimeIsCurrentlyMimicking(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
AND
LLMIME_Brawler_QRY_DamageTypeMatches(_Mime, _DamageType)
AND
NOT DB_LLMIME_Brawler_BonusAttackTimer(_, _Mime, _Target)
AND
GetUUID(_Mime, _MimeID)
AND
StringConcatenate("LLMIME_Timers_BrawlerBonusAttack_", _MimeID, _TimerName)
THEN
LLMIME_Brawler_ApplyBonusDamage(_Mime, _Target);
DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target);
TimerLaunch(_TimerName, 25); // Prevents multiple bonus damage calls in a single frame

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target)
THEN
NOT DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target);

PROC
LLMIME_Brawler_ApplyBonusDamage((CHARACTERGUID)_Mime, (GUIDSTRING)_Target)
AND
CharacterGetLevel(_Mime, _Level)
AND
IntegerProduct(_Level, 5, _Damage)
THEN
ApplyDamage(_Target, _Damage, "Physical", _Mime);
//END_REGION

//REGION DOUBLE_ATTACK
IF
CharacterCriticalHitBy(_Target, _Owner, _Mime)
//AttackedByObject(_Target, _Owner, (CHARACTERGUID)_Mime, _DamageType, "Attack")
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
AND
ObjectGetFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK", 0)
AND
NOT DB_LLMIME_Brawler_ExtraAttackTimer(_, _Mime, _)
AND
GetUUID(_Mime, _MimeID)
AND
StringConcatenate("LLMIME_Timers_BrawlerExtraAttack_", _MimeID, _TimerName)
THEN
ObjectSetFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK");
DB_LLMIME_Brawler_ExtraAttackTimer(_TimerName, _Mime, _Target);
TimerLaunch(_TimerName, 500);

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_Brawler_ExtraAttackTimer(_TimerName, _Mime, _Target)
THEN
NOT DB_LLMIME_Brawler_ExtraAttackTimer(_TimerName, _Mime, _Target);
//CharacterUseSkill(_Mime, "Target_LLMIME_UnarmedAttack1", _Target, 1, 1, 1);
CharacterAttack(_Mime, _Target);
ObjectClearFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
