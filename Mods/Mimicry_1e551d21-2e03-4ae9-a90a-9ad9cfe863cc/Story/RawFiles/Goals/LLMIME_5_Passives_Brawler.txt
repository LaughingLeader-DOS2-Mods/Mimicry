Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_Brawler_InitSettings();
/*Settings*/
//DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
/*Temp*/
//DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle)
//DB_LLMIME_Brawler_JustToggledStance(_Mime)
KBSECTION
//REGION SETTINGS
PROC
LLMIME_Brawler_InitSettings()
THEN
DB_LLMIME_Brawler_StanceStatuses("LLMIME_BRAWLER_STANCE_CON", "LLMIME_BrawlerStance_UseCon");
DB_LLMIME_Brawler_StanceStatuses("LLMIME_BRAWLER_STANCE_STR", "LLMIME_BrawlerStance_UseStr");
DB_LLMIME_Brawler_StanceStatuses("LLMIME_BRAWLER_STANCE_FIN", "LLMIME_BrawlerStance_UseFin");
//END_REGION

//REGION DEBUG
IF
AttackedByObject(_Target, _Owner, (CHARACTERGUID)_Mime, _DamageType, _DamageSource)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Mime:AttackedByObject] Mime attacked something. DamageType[",_DamageType,"] DamageSource[",_DamageSource,"].");

IF
CharacterReceivedDamage(_Target, _Percentage, (CHARACTERGUID)_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
AND
IntegertoString(_Percentage, _DamageStr)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Mime:CharacterReceivedDamage] Mime did [",_DamageStr,"]% damage. Whatever that means.");
//END_REGION

//REGION BRAWLER_STANCE_PREFERENCE_SET
PROC
LLMIME_Brawler_SetStancePreference((CHARACTERGUID)_Mime, (STRING)_Flag)
AND
NOT ObjectGetFlag(_Mime, _Flag, 1)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _SettingsFlag)
THEN
ObjectClearFlag(_Mime, _SettingsFlag);

PROC
LLMIME_Brawler_SetStancePreference((CHARACTERGUID)_Mime, (STRING)_Flag)
AND
NOT ObjectGetFlag(_Mime, _Flag, 1)
THEN
ObjectSetFlag(_Mime, _Flag);
LLMIME_Brawler_RemoveStance(_Mime);
LLMIME_Brawler_ApplyStance(_Mime);

QRY
LLMIME_Brawler_QRY_StancePreferenceSet((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
ObjectGetFlag(_Mime, _Flag, 1)
THEN
DB_NOOP(1);

IF
CharacterUsedSkill(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT LLMIME_Brawler_QRY_StancePreferenceSet(_Mime)
THEN
ObjectSetFlag(_Mime, "LLMIME_BrawlerStance_UseCon"); // Default
//END_REGION

//REGION BRAWLER_STANCE_TOGGLE
QRY
LLMIME_Brawler_QRY_StanceIsActive((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
HasActiveStatus(_Mime, _Status, 1)
THEN
DB_NOOP(1);

IF
CharacterUsedSkill(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime)
AND
NOT LLMIME_Brawler_QRY_StanceIsActive(_Mime)
THEN
SetStoryEvent(_Mime, "LLMIME_Events_BrawlerStanceActivated_Start");

IF
CharacterUsedSkill(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime)
AND
LLMIME_Brawler_QRY_StanceIsActive(_Mime)
THEN
SetStoryEvent(_Mime, "LLMIME_Events_BrawlerStanceDeactivated_Start");

IF
SkillCast(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime)
AND
NOT LLMIME_Brawler_QRY_StanceIsActive(_Mime)
THEN
SetStoryEvent(_Mime, "LLMIME_Events_BrawlerStanceActivated_Cast");
LLMIME_Brawler_ApplyStance(_Mime);
DB_LLMIME_Brawler_JustToggledStance(_Mime);

IF
SkillCast(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime)
AND
LLMIME_Brawler_QRY_StanceIsActive(_Mime)
THEN
SetStoryEvent(_Mime, "LLMIME_Events_BrawlerStanceDeactivated_Cast");
LLMIME_Brawler_RemoveStance(_Mime);
DB_LLMIME_Brawler_JustToggledStance(_Mime);

IF
SkillCast(_Mime, "Shout_LLMIME_BrawlerStance", _)
AND
DB_LLMIME_Brawler_JustToggledStance(_Mime)
THEN
NOT DB_LLMIME_Brawler_JustToggledStance(_Mime);

PROC
LLMIME_Brawler_ApplyStance((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
ObjectGetFlag(_Mime, _Flag, 1)
AND
HasActiveStatus(_Mime, _Status, 0)
THEN
ApplyStatus(_Mime, _Status, -1.0, 1);
//END_REGION

//REGION BRAWLER_STANCE_REMOVAL
IF
ItemUnEquipped(_Item, _Mime)
AND
IsTagged(_Item, "LLMIME_BrawlerFist", 1)
THEN
LLMIME_Brawler_RemoveStance(_Mime);

PROC
LLMIME_Brawler_RemoveStance((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Brawler_StanceStatuses(_Status, _Flag)
AND
HasActiveStatus(_Mime, _Status, 1)
THEN
RemoveStatus(_Mime, _Status);
SetStoryEvent(_Mime, "LLMIME_Events_BrawlerStanceDeactivated_Status");
//END_REGION

//REGION DAMAGE_TYPE_MATCHING
QRY
LLMIME_Brawler_QRY_DamageTypeMatches((CHARACTERGUID)_Mime, (STRING)_DamageType)
THEN
DB_NOOP(1);
//END_REGION

//REGION BONUS_DAMAGE
IF
AttackedByObject(_Target, _Owner, (CHARACTERGUID)_Mime, _DamageType, "Attack")
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER_BONUS", 1)
AND
LLMIME_Brawler_QRY_DamageTypeMatches(_Mime, _DamageType)
AND
NOT DB_LLMIME_Brawler_BonusAttackTimer(_, _Mime, _Target)
AND
GetUUID(_Mime, _MimeID)
AND
StringConcatenate("LLMIME_Timers_BrawlerBonusAttack_", _MimeID, _TimerName)
THEN
//LLMIME_Brawler_ApplyBonusDamage(_Mime, _Target);
ApplyStatus(_Target, "LLMIME_UNARMED_BONUS_HIT", 1.0, 1, _Mime);
DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target);
TimerLaunch(_TimerName, 250); // Prevents multiple bonus damage calls in a single attack

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target)
THEN
NOT DB_LLMIME_Brawler_BonusAttackTimer(_TimerName, _Mime, _Target);

PROC
LLMIME_Brawler_ApplyBonusDamage((CHARACTERGUID)_Mime, (GUIDSTRING)_Target)
AND
CharacterGetLevel(_Mime, _Level)
AND
IntegerProduct(_Level, 5, _Damage)
THEN
ApplyDamage(_Target, _Damage, "Physical", _Mime);
//END_REGION

//REGION DOUBLE_ATTACK
IF
CharacterStartAttackObject(_, _, _Mime)
AND
CharacterIsInCombat(_Mime, 1)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
NOT DB_LLMIME_Brawler_Temp_MimeIsAttacking(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK", 0)
THEN
DB_LLMIME_Brawler_Temp_MimeIsAttacking(_Mime);

IF
CharacterCriticalHitBy(_Target, _Owner, _Mime)
AND
CharacterIsDead(_Target, 0)
AND
CharacterIsInCombat(_Mime, 1)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
DB_LLMIME_Brawler_Temp_MimeIsAttacking(_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER_BONUS", 1)
AND
ObjectGetFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK", 0)
THEN
ObjectSetFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK");
LLMIME_Brawler_DoubleAttack(_Mime, _Target);

PROC
LLMIME_Brawler_DoubleAttack((CHARACTERGUID)_Mime, (GUIDSTRING)_Target)
AND
NOT DB_LLMIME_Brawler_DoubleAttackTimer(_, _Mime, _)
AND
GetUUID(_Mime, _ID)
AND
StringConcatenate("LLMIME_Timers_BrawlerDoubleAttack_", _ID, _TimerName)
AND
PlayLoopEffect(_Mime, "LLMIME_FX_DoubleAttack_Overlay_01", "", _FXHandle)
THEN
CharacterAddActionPoints(_Mime, 2);
//PlayAnimation(_Mime, "attack1");
CharacterStatusText(_Mime, "<font color='#8A2BE2' size='24'>Double Strike!</font>");
CharacterAttack(_Mime, _Target);
DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle);
TimerLaunch(_TimerName, 3000);

IF
AttackedByObject(_Target, _, (CHARACTERGUID)_Mime, _, _)
AND
DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle)
THEN
TimerCancel(_TimerName);
TimerLaunch(_TimerName, 2000);
StopLoopEffect(_FXHandle);
NOT DB_LLMIME_Brawler_Temp_MimeIsAttacking(_Mime);

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle)
THEN
NOT DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle);
ObjectClearFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK");
//END_REGION

//REGION RESET
IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_ResetMimeCombatData")
AND
DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle)
THEN
NOT DB_LLMIME_Brawler_DoubleAttackTimer(_TimerName, _Mime, _FXHandle);
TimerCancel(_TimerName);
StopLoopEffect(_FXHandle);
ObjectClearFlag(_Mime, "LLMIME_CANNOT_DOUBLE_ATTACK");
NOT DB_LLMIME_Brawler_Temp_MimeIsAttacking(_Mime);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
