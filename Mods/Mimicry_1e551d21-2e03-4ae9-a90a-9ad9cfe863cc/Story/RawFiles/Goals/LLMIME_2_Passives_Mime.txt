Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_Mime_InitSettings();

/*Settings*/
//DB_LLMIME_Mime_Skills(_Skill)
//DB_LLMIME_Mime_LearnableSkills(_Skill)
/*Data*/
//DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill)
KBSECTION
//REGION SETTINGS
PROC
LLMIME_Mime_InitSettings()
THEN
SysClear("DB_LLMIME_Mime_MimeActivatingEquipmentTags", 1);
DB_LLMIME_Mime_MimeActivatingEquipmentTags("LLMIME_ACTIVATE_MIME");

SysClear("DB_LLMIME_Mime_Skills", 1);
DB_LLMIME_Mime_Skills("Shout_LLMIME_BrawlerStance");
DB_LLMIME_Mime_Skills("Shout_LLMIME_OpenMenu");
DB_LLMIME_Mime_Skills("Shout_LLMIME_DisableMimicking");

SysClear("DB_LLMIME_Mime_LearnableSkills", 1);
DB_LLMIME_Mime_LearnableSkills("Projectile_LLMIME_Decoy");
DB_LLMIME_Mime_LearnableSkills("Projectile_LLMIME_FinalWish");
DB_LLMIME_Mime_LearnableSkills("Shout_LLMIME_SourceMimicking");
DB_LLMIME_Mime_LearnableSkills("Shout_LLMIME_QuakeSlam");
DB_LLMIME_Mime_LearnableSkills("Target_LLMIME_VitalInfluence");
//Skill alternatives (muted bypass)
DB_LLMIME_Mime_LearnableSkills("Shout_LLMIME_Overthrow");
DB_LLMIME_Mime_LearnableSkills("Shout_LLMIME_EvasiveManeuver");
DB_LLMIME_Mime_LearnableSkills("MultiStrike_LLMIME_MimeVault");
DB_LLMIME_Mime_LearnableSkills("Target_LLMIME_SilencingStare");
DB_LLMIME_Mime_LearnableSkills("Target_LLMIME_KneeBreaker");
DB_LLMIME_Mime_LearnableSkills("Target_LLMIME_DisarmingBlow");
DB_LLMIME_Mime_LearnableSkills("Target_LLMIME_SealEvil");
DB_LLMIME_Mime_LearnableSkills("Target_LLMIME_Fatality");

LeaderLib_Skills_Register_StatusToggleSkill("Shout_LLMIME_DisableMimicking", "LLMIME_MIMICKING_DISABLED", -1.0, 1);
//END_REGION

//REGION UPDATING
QRY
LLMIME_Mime_Internal_QRY_VersionNeedsUpdating((STRING)_Version)
AND
_Version == "0.9.0.0"
THEN
DB_NOOP(1);

PROC
LeaderUpdater_ModUpdated("Mimicry", "LaughingLeader", _Version)
AND
LLMIME_Mime_Internal_QRY_VersionNeedsUpdating(_Version)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Mime] Updating settings from version [",_Version,"]");
LLMIME_Mime_InitSettings();
//END_REGION

//REGION QUERIES
QRY
LLMIME_Mime_QRY_IsMimeItem((ITEMGUID)_Item)
AND
DB_LLMIME_Mime_MimeActivatingEquipmentTags(_Tag)
AND
IsTagged(_Item, _Tag, 1)
THEN
DB_NOOP(1);

QRY
LLMIME_Mime_QRY_SafeToSetup((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
NOT DB_InCharacterCreation(1)
THEN
DB_NOOP(1);
//END_REGION

//REGION MIME_INIT
/*
IF
ItemEquipped(_Item, _Mime)
AND
LLMIME_Mime_QRY_IsMimeItem(_Item)
*/
IF
CharacterStatusApplied(_Mime, "LLMIME_MASK_INFO", _)
AND
GlobalGetFlag("LeaderLib_Initialized", 1)
AND
NOT LLMIME_QRY_CharacterIsADummy(_Mime)
AND
NOT LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
//LLMIME_RemoveAllMimicryStatuses(_Mime);
SetStoryEvent(_Mime, "Mimicry_InitMimeJob");

IF
CharacterStatusApplied(_Mime, "LLMIME_MASK_INFO", _)
AND
NOT GlobalGetFlag("LeaderLib_Initialized", 1)
AND
NOT LLMIME_QRY_CharacterIsADummy(_Mime)
AND
NOT LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
DB_LLMIME_Temp_ActivateMime(_Mime);

IF
CharacterCreationFinished(_Mime)
AND
DB_LLMIME_Mime_MimeActivatingEquipmentTags(_Tag)
AND
NOT DB_LLMIME_Temp_ActivateMime(_Mime)
AND
CharacterFindTaggedItem(_Mime, _Tag, _Mask)
THEN
DB_LLMIME_Temp_ActivateMime(_Mime);

IF
GameStarted(_,_)
AND
DB_LLMIME_Temp_ActivateMime(_Mime)
THEN
SetStoryEvent(_Mime, "Mimicry_InitMimeJob");
NOT DB_LLMIME_Temp_ActivateMime(_Mime);

IF
CharacterResurrected(_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
SetStoryEvent(_Mime, "Mimicry_InitMimeJob");
//END_REGION

//REGION REMOVAL
IF
CharacterStatusRemoved(_Mime, "LLMIME_MASK_INFO", _)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
SetStoryEvent(_Mime, "Mimicry_RemoveMimeJob");
//END_REGION

//REGION SKILLS
IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_MimeInitialized")
AND
IsTagged(_Mime, "LLMIME_MimeFollower", 0)
AND
DB_LLMIME_Mime_Skills(_Skill)
AND
CharacterHasSkill(_Mime, _Skill, 0)
THEN
CharacterAddSkill(_Mime, _Skill);

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_MimeJobRemoved")
AND
IsTagged(_Mime, "LLMIME_MimeFollower", 0)
AND
DB_LLMIME_Mime_Skills(_Skill)
AND
CharacterHasSkill(_Mime, _Skill, 1)
THEN
CharacterRemoveSkill(_Mime, _Skill);
//END_REGION

//REGION EFFECTS
PROC
ProcProcessUseOfItem((CHARACTERGUID)_Character,(ITEMGUID)_Item,(INTEGER)_RequestID)
AND
NOT DB_CustomUseItemResponse(_Character, _Item, 0)
AND
GetTemplate(_Item, _Template)
AND
DB_LLMIME_Templates("Mask_A", _Template)
THEN
SetStoryEvent(_Character, "Mimicry_Events_Mime_MaskEquipped");

IF
ItemUnEquipped(_Item, _Character)
AND
GetTemplate(_Item, _Template)
AND
LLMIME_QRY_IsMaskTemplate(_Template)
THEN
SetStoryEvent(_Character, "Mimicry_Events_Mime_MaskUnEquipped");
//END_REGION

//REGION MASK_LEVELING
IF
CharacterLeveledUp(_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
SetStoryEvent(_Mime, "Mimicry_MimeLeveledUp");
//END_REGION

//REGION SKILL_MEMORY
//Mime preset skills
IF
CharacterCreationFinished(_Mime)
AND
DB_LLMIME_Mime_LearnableSkills(_Skill)
AND
CharacterHasSkill(_Mime, _Skill, 1)
AND
NOT DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill)
THEN
DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill);

IF
CharacterLearnedSkill(_Mime, _Skill)
AND
DB_LLMIME_Mime_LearnableSkills(_Skill)
AND
NOT DB_InCharacterCreation(1)
AND
NOT DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill)
THEN
DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill);

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_MimeInitialized")
AND
IsTagged(_Mime, "LLMIME_MimeFollower", 0)
AND
DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill)
AND
CharacterHasSkill(_Mime, _Skill, 0)
THEN
CharacterAddSkill(_Mime, _Skill);

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_MimeJobRemoved")
AND
IsTagged(_Mime, "LLMIME_MimeFollower", 0)
AND
DB_LLMIME_Mime_MimeSkillMemory(_Mime, _Skill)
AND
CharacterHasSkill(_Mime, _Skill, 1)
THEN
CharacterRemoveSkill(_Mime, _Skill);
//END_REGION

//REGION MIME_STATUS_ATTEMPTS
IF
CharacterStatusAttempt(_Character, _Status, _)
AND
DB_LLMIME_MimickingStatuses(_Status)
AND
NOT LLMIME_QRY_CharacterIsAMime(_Character)
THEN
RemoveStatus(_Character, _Status);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
