Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_Skills_InitSettings();
KBSECTION
//REGION SETTINGS
PROC
LLMIME_Skills_InitSettings()
THEN
SysClear("DB_LLMIME_Skills_DecoyTags", 1);
DB_LLMIME_Skills_DecoyTags("LLMIME_Decoy");
DB_LLMIME_Skills_DecoyTags("AI_PREFERRED_TARGET");
DB_LLMIME_Skills_DecoyTags("IGNORE_UNDEAD_CRIME");
DB_LLMIME_Skills_DecoyTags("IGNORESEENCOMBAT");
DB_LLMIME_Skills_DecoyTags("IGNOREVANDALISE");

SysClear("DB_LLMIME_Skills_StealWeapon", 2);
DB_LLMIME_Skills_StealWeapon("Axe_1H", "WPN_LLWEAPONEX_Throwing_Axe1H_50a05d6a-90c5-44b7-aeae-c8329550e283");
DB_LLMIME_Skills_StealWeapon("Axe_2H", "WPN_LLWEAPONEX_Throwing_Axe2H_5f83d71c-d529-4363-bd8b-33eb433c81c8");
DB_LLMIME_Skills_StealWeapon("_Bow_", "WPN_LLWEAPONEX_Throwing_Bow_2473fceb-8232-4265-80e8-8e1b3d13c193");
DB_LLMIME_Skills_StealWeapon("_Crossbow_", "WPN_LLWEAPONEX_Throwing_Crossbow_c40ef0c4-74a8-47f4-a31b-73ea3b56ae8c");
DB_LLMIME_Skills_StealWeapon("_Dagger_", "WPN_LLWEAPONEX_Throwing_Dagger_63896c15-2c42-40c6-a032-5415039ea03e");
DB_LLMIME_Skills_StealWeapon("Mace_1H", "WPN_LLWEAPONEX_Throwing_Mace1H_68f7e90e-ac76-40b9-8fdf-fa82e8b058f8");
DB_LLMIME_Skills_StealWeapon("Mace_2H", "WPN_LLWEAPONEX_Throwing_Mace2H_4327c16c-e992-4445-8e16-e38ebb2bfd34");
DB_LLMIME_Skills_StealWeapon("_Scythe_", "WPN_LLWEAPONEX_Throwing_Scythe_7a4acd18-b18a-46e9-ae80-2deca72f110e");
DB_LLMIME_Skills_StealWeapon("_Shield_", "WPN_LLWEAPONEX_Throwing_Shield_8916a325-b0b4-4bb0-a0bb-d3c8740832c4");
DB_LLMIME_Skills_StealWeapon("_Sickle_", "WPN_LLWEAPONEX_Throwing_Sickle_a64ebf8f-66c3-4bef-924c-ae8ecffe96ba");
DB_LLMIME_Skills_StealWeapon("_Spear_", "WPN_LLWEAPONEX_Throwing_Spear_46d7a5f4-dd51-498f-a2e5-7fc3d2c97b6a");
DB_LLMIME_Skills_StealWeapon("_Staff_", "WPN_LLWEAPONEX_Throwing_Staff_9a7d3a8d-f55e-4bd0-8073-cda53953a102");
DB_LLMIME_Skills_StealWeapon("Sword_1H", "WPN_LLWEAPONEX_Throwing_Sword1H_34fc51f7-87d1-4d36-ac49-6df9d1d32155");
DB_LLMIME_Skills_StealWeapon("Sword_2H", "WPN_LLWEAPONEX_Throwing_Sword2H_56e4cc0d-1f96-4930-a33f-93ca33a28018");
DB_LLMIME_Skills_StealWeapon("_Wand_", "WPN_LLWEAPONEX_Throwing_Wand_97f3844d-100e-49a0-8814-eed74c040bb1");
DB_LLMIME_Skills_StealWeapon("Chair", "WPN_LLWEAPONEX_Throwing_Chair_01_ef9f3937-a609-45cb-999c-9178a02eb7ca");
DB_LLMIME_Skills_StealWeapon("Rock", "WPN_LLWEAPONEX_Throwing_Rock_eb7b3d1f-43f8-43c3-b529-2713eba49000");
//DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target)
//DB_LLMIME_Skills_Temp_FailedWish(_Caster)
//END_REGION

//REGION UPDATING
QRY
LLMIME_Skills_Internal_QRY_VersionNeedsUpdating((STRING)_Version)
AND
_Version == "0.9.0.0"
THEN
DB_NOOP(1);

PROC
LeaderUpdater_ModUpdated("Mimicry", "LaughingLeader", _Version)
AND
LLMIME_Skills_Internal_QRY_VersionNeedsUpdating(_Version)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Skills] Updating settings from version [",_Version,"]");
LLMIME_Skills_InitSettings();
//END_REGION

//REGION QUERIES
QRY
LLMIME_Skills_QRY_SkillMatch((STRING)_Skill, (STRING)_CheckedSkill)
AND
_Skill == _CheckedSkill
THEN
DB_NOOP(1);

//Follower versions
QRY
LLMIME_Skills_QRY_SkillMatch((STRING)_Skill, (STRING)_CheckedSkill)
AND
StringConcatenate(_CheckedSkill, "_Follower", _Skill)
THEN
DB_NOOP(1);
//END_REGION

//REGION WISH
IF
CharacterUsedSkillOnTarget(_Caster, (CHARACTERGUID)_Target, "Target_LLMIME_Wish", _, _)
AND
CharacterGetHitpointsPercentage(_Caster, _CasterHealth)
AND
_CasterHealth > 2.0
AND
RealDivide(_CasterHealth, 2.0, _NextHealth)
AND
_NextHealth > 1.0
THEN
SetStoryEvent(_Caster, "Mimicry_Events_Wish_UsedSkill");
DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target);

IF
CharacterUsedSkillOnTarget(_Caster, (CHARACTERGUID)_Target, "Target_LLMIME_Wish", _, _)
AND
NOT DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target)
THEN
DB_LLMIME_Skills_Temp_FailedWish(_Caster);

IF
SkillCast(_Caster, "Target_LLMIME_Wish", _, _)
AND
DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target);
SetVarFloat(_Caster, "Mimicry_Wish_HealPercentage", 0.50);
CharacterCharacterSetEvent(_Caster, _Target, "Mimicry_Events_OnWishCast");
SetStoryEvent(_Target, "Mimicry_Events_Wish_SkillCast");

IF
SkillCast(_Caster, "Target_LLMIME_Wish", _, _)
AND
DB_LLMIME_Skills_Temp_FailedWish(_Caster)
THEN
NOT DB_LLMIME_Skills_Temp_FailedWish(_Caster);
CharacterStatusText(_Caster, "LLMIME_StatusText_WishFailed");

IF
CharacterCharacterEvent(_Caster, _Target, "Mimicry_Events_WishDelay")
AND
NOT DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _)
AND
GetUUID(_Caster, _CasterID)
AND
StringConcatenate("LLMIME_Timers_WishDelayTimer_", _CasterID, _TimerName)
THEN
DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _TimerName);
TimerLaunch(_TimerName, 500);

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _TimerName)
THEN
NOT DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _TimerName);
CharacterCharacterSetEvent(_Caster, _Target, "Mimicry_Events_HealWishTarget");

//Fix for CharacterHeal sending vitality over the max
IF
CharacterVitalityChanged(_Target, _Percentage)
AND
ObjectGetFlag(_Target, "Mimicry_Wish_CheckHealthResult", 1)
AND
LeaderLib_Helper_QRY_ClearObjectFlag(_Target, "Mimicry_Wish_CheckHealthResult")
AND
_Percentage > 100
THEN
CharacterSetHitpointsPercentage(_Target, 100.0);
//END_REGION

//REGION FINAL_WISH
/*Delay actually dying so the animation can play out*/
IF
CharacterUsedSkill(_Character, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "Projectile_LLMIME_FinalWish")
THEN
LeaderLib_StartObjectTimer(_Character, 3000, "Mimicry_Timers_FinalWish_DieEvent", "Mimicry_Events_FinalWish_Die");
LeaderLib_StartObjectTimer(_Character, 1000, "Mimicry_Timers_FinalWish_UsedEvent_", "Mimicry_Events_FinalWish_SkillUsed");
LeaderLib_StartObjectTimer(_Character, 2600, "Mimicry_Timers_FinalWish_DeathEffect", "Mimicry_Events_FinalWish_PlayDeathEffect");

IF
SkillCast(_Character, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "Projectile_LLMIME_FinalWish")
THEN
LeaderLib_CancelObjectTimerByEvent(_Character, "Mimicry_Events_FinalWish_Die");
LeaderLib_StartObjectTimer(_Character, 1000, "Mimicry_Timers_FinalWish_", "Mimicry_Events_FinalWish_Die");

IF
StoryEvent((CHARACTERGUID)_Character, "Mimicry_Events_FinalWish_Die")
AND
CharacterIsDead(_Character, 0)
THEN
CharacterDie(_Character, 1, "DoT");

IF
CharacterStatusAttempt(_Target, "LLMIME_FINAL_WISH_TARGET", (CHARACTERGUID)_Caster)
AND
NOT DB_LLMIME_Skills_FinalWish_Target(_Target, _Caster)
//LeaderLib_Helper_QRY_HasStatus(_Caster, "LLMIME_SACRIFICED")
THEN
DB_LLMIME_Skills_FinalWish_Target(_Target, _Caster);
LeaderLog_Log("DEBUG", "[Mimicry:Skills:CharacterStatusAttempt(LLMIME_FINAL_WISH_TARGET)] Final Wish target set.");

IF
CharacterResurrected(_Target)
AND
DB_LLMIME_Skills_FinalWish_Target(_Target, _Caster)
THEN
NOT DB_LLMIME_Skills_FinalWish_Target(_Target, _Caster);
CharacterCharacterSetEvent(_Target, _Caster, "Mimicry_Events_RevivedByFinalWish");
LeaderLog_Log("DEBUG", "[Mimicry:Skills:CharacterResurrected] Final Wish target detected.");

IF
CharacterReceivedDamage(_Character, _, _)
AND
HasActiveStatus(_Character, "LLMIME_FINAL_WISH_BUFF", 1)
THEN
SetStoryEvent(_Character, "Mimicry_Events_FinalWish_OnAttacked");
//END_REGION

//REGION DECOY
IF
CharacterUsedSkill(_Character, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "Projectile_LLMIME_Decoy")
AND
NOT DB_LLMIME_Skills_Temp_DecoyPosition(_Character, _, _, _)
AND
GetPosition(_Character, _x, _y, _z)
AND
LeaderLog_QRY_RealToIntToString("LLMIME.Debug.DecoyPos", _x, _z)
AND
DB_LeaderLog_Temp_RealString("LLMIME.Debug.DecoyPos", _xstr, _zstr)
THEN
DB_LLMIME_Skills_Temp_DecoyPosition(_Character, _x, _y, _z);
LeaderLog_Log("DEBUG", "[LLMIME:Skills:CharacterUsedSkill(Decoy)] Saving decoy spawn position [",_xstr,",",_zstr,"].");
NOT DB_LeaderLog_Temp_RealString("LLMIME.Debug.DecoyPos", _xstr, _zstr);

IF
CharacterUsedSkill(_Character, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "Projectile_LLMIME_Decoy")
AND
GetPosition(_Character, _x, _y, _z)
THEN
DB_LLMIME_Skills_Temp_DecoyPosition(_Character, _x, _y, _z);
LeaderLib_StartObjectTimer(_Character, 450, "LLMIME_Timers_Skills_Internal_Decoy_SmokeEffect_", "Mimicry_Events_Skills_Internal_PlayDecoySmokeEffect");
LeaderLib_StartObjectTimer(_Character, 500, "LLMIME_Timers_Skills_Internal_StartDecoySetup_", "Mimicry_Events_Skills_Internal_StartDecoySetup");
//SetStoryEvent(_Character, "Mimicry_Events_Skills_Internal_StartDecoySetup");


IF
StoryEvent((CHARACTERGUID)_Character, "Mimicry_Events_Skills_Internal_PlayDecoySmokeEffect")
AND
DB_LLMIME_Skills_Temp_DecoyPosition(_Character, _x, _y, _z)
THEN
PlayEffectAtPosition("LLMIME_FX_Skills_Decoy_Cast_Smoke_Root_01", _x, _y, _z);

IF
StoryEvent((CHARACTERGUID)_Character, "Mimicry_Events_Skills_Internal_StartDecoySetup")
AND
DB_LLMIME_Skills_Temp_DecoyPosition(_Character, _x, _y, _z)
THEN
NOT DB_LLMIME_Skills_Temp_DecoyPosition(_Character, _x, _y, _z);
LLMIME_Skills_Internal_CreateDecoyAtPosition(_Character, _x, _y, _z);

PROC
LLMIME_Skills_Internal_CreateDecoyAtPosition((CHARACTERGUID)_Character, (REAL)_x, (REAL)_y, (REAL)_z)
AND
CharacterGetLevel(_Character, _Level)
AND
DB_LLMIME_Templates("Decoy", _DecoyTemplate)
AND
//TemporaryCharacterCreateOutOfSightToObject(_DecoyTemplate, _Character, _Character, 0, "", _Decoy)
TemporaryCharacterCreateAtPosition(_x, _y, _z, _DecoyTemplate, 0, _Decoy)
THEN
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy);
SetVisible(_Decoy, 0);
PlayEffect(_Decoy, "LLMIME_FX_Skills_Decoy_Overlay_FadeIn_01");
PlayEffectAtPosition("RS3_FX_GP_ScriptedEvent_Ambushers_Smoke_01", _x, _y, _z);
ObjectSetFlag(_Decoy, "LLMIME_Decoy");
SetVarObject(_Decoy, "LLMIME_Decoy_Caster", _Character);
SetScriptframe(_Decoy, "LLMIME_Decoy_CopyRotation");
CharacterLevelUpTo(_Decoy, _Level);
CharacterTransformAppearanceTo(_Decoy, _Character, 1, 1);
LeaderLib_StartObjectTimer(_Decoy, 50, "LLMIME_Timers_Skills_Internal_SetupDecoy_", "Mimicry_Events_Skills_Internal_SetupDecoy");
//SetStoryEvent(_Character, "Mimicry_Events_Skills_Internal_SetupDecoyTags");
TeleportToPosition(_Decoy, _x, _y, _z, "Mimicry_Events_Skills_Internal_DecoyTeleported", 0);
LeaderLog_Log("DEBUG", "[LLMIME:Skills:SkillCast(Decoy)] Spawned decoy at saved position.");

/*
IF
StoryEvent((CHARACTERGUID)_Decoy, "Mimicry_Events_Skills_Internal_DecoyTeleported")
THEN
*/

/*
IF
StoryEvent((CHARACTERGUID)_Decoy, "Mimicry_Events_Skills_Internal_DecoyTeleported")
AND
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy)
AND
GetStatusTurns(_Character, "LLMIME_DECOY_ACTIVE", _Turns)
AND
IntegerProduct(_Turns, 6, _DurationInt)
AND
Real(_DurationInt, _Duration)
THEN
ApplyStatus(_Decoy, "LLMIME_DECOY_LIFETIME", _Duration, 1);
*/

IF
StoryEvent((CHARACTERGUID)_Decoy, "Mimicry_Events_Skills_Internal_SetupDecoy")
THEN
LLMIME_Skills_Internal_ApplyDecoyTags(_Decoy);
SetOnStage(_Decoy, 1);
LLMIME_Skills_SetupDecoy(_Decoy);
SetVisible(_Decoy, 1);

PROC
LLMIME_Skills_Internal_ApplyDecoyTags((CHARACTERGUID)_Decoy)
AND
DB_LLMIME_Skills_DecoyTags(_Tag)
AND
IsTagged(_Decoy, _Tag, 0)
THEN
SetTag(_Decoy, _Tag);
LeaderLog_Log("DEBUG", "[LLMIME:Skills:ApplyDecoyTags] Set tag [",_Tag,"] on decoy.");

PROC
LLMIME_Skills_SetupDecoy((CHARACTERGUID)_Decoy)
AND
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy)
AND
GetFaction(_Character, _Faction)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Skills:SetupDecoy] Setting up decoy.");
SetFaction(_Decoy, _Faction);
CharacterDisableAllCrimes(_Decoy);
CharacterSetCorpseLootable(_Decoy, 0);
//CharacterAddTalent(_Decoy, "Unstable");
CharacterAddTalent(_Decoy, "Raistlin"); // AI exploit ;)

/*
PROC
LLMIME_Skills_SetupDecoy((CHARACTERGUID)_Decoy)
AND
CharacterFindTaggedItem(_Decoy, "LLMIME_MimeMask", _Mask)
AND
GetTemplate(_Mask, _MaskTemplate)
AND
DB_LLMIME_Templates("Mask_A", _MaskTemplate)
AND
DB_LLMIME_Templates("Mask_A_Preview", _PreviewTemplate)
THEN
Transform(_Mask, _PreviewTemplate, 1, 1, 1);
*/

IF
ObjectTurnEnded((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy)
THEN
CharacterCharacterSetEvent(_Character, _Decoy, "Mimicry_Events_Decoy_TauntNearbyEnemies");

IF
CharacterStatusRemoved(_Character, "LLMIME_DECOY_ACTIVE", _)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Character, "LLMIME_DECOY_ACTIVE")
AND
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy)
THEN
LLMIME_Skills_Internal_OnDecoyRemoved(_Decoy);
//CharacterDieImmediate(_Decoy, 0, "None");

IF
CharacterStatusRemoved(_Decoy, "LLMIME_DECOY_LIFETIME", _)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Decoy, "LLMIME_DECOY_LIFETIME")
THEN
LLMIME_Skills_Internal_OnDecoyRemoved(_Decoy);

IF
CharacterDying(_Decoy)
AND
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy)
THEN
LLMIME_Skills_Internal_OnDecoyRemoved(_Decoy);

PROC
LLMIME_Skills_Internal_OnDecoyRemoved((CHARACTERGUID)_Decoy)
AND
ObjectIsOnStage(_Decoy, 1)
AND
GetPosition(_Decoy, _x, _y, _z)
THEN
//PlayEffectAtPosition("RS3_FX_GP_Combat_CorpseExplosion_Wood_01_Small", _x, _y, _z);
//PlayEffectAtPosition("RS3_FX_Poof_Wood_01", _x, _y, _z);
PlayEffectAtPosition("RS3_FX_GP_ScriptedEvent_Ambushers_Smoke_01", _x, _y, _z);
SetOnStage(_Decoy, 0);

PROC
LLMIME_Skills_Internal_OnDecoyRemoved((CHARACTERGUID)_Decoy)
AND
DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy)
THEN
NOT DB_LLMIME_Skills_Temp_Decoy(_Character, _Decoy);
LLMIME_Skills_Internal_RemoveDecoyStatus(_Character);

PROC
LLMIME_Skills_Internal_RemoveDecoyStatus((CHARACTERGUID)_Character)
AND
NOT DB_LLMIME_Skills_Temp_Decoy(_Character, _)
AND
NOT LeaderLib_QRY_ObjectTimerStarted(_Character, "LLMIME_Timers_Skills_RemoveDecoyActiveStatus_")
THEN
LeaderLib_StartObjectTimer(_Character, 250, "LLMIME_Timers_Skills_RemoveDecoyActiveStatus_", "Mimicry_Events_Skills_Internal_RemoveDecoyActiveStatus");

IF
StoryEvent((CHARACTERGUID)_Character, "Mimicry_Events_Skills_Internal_RemoveDecoyActiveStatus")
AND
NOT DB_LLMIME_Skills_Temp_Decoy(_Character, _)
AND
LeaderLib_Helper_QRY_HasStatus(_Character, "LLMIME_DECOY_ACTIVE")
THEN
SetStoryEvent(_Character, "Mimicry_Events_Decoy_RemoveInvisibility");

IF
AttackedByObject((CHARACTERGUID)_Character, _, _Attacker, _, _)
AND
LeaderLib_Helper_QRY_HasStatus(_Character, "LLMIME_DECOY_ACTIVE")
THEN
SetStoryEvent(_Character, "Mimicry_Events_Decoy_RemoveInvisibility");

IF
CharacterStatusApplied(_Character, _Status, _)
AND
_Status != "LLMIME_DECOY_ACTIVE"
AND
LeaderLib_Helper_QRY_HasStatus(_Character, "LLMIME_DECOY_ACTIVE")
AND
LeaderLib_Helper_QRY_IsStunningStatus(_Status)
THEN
SetStoryEvent(_Character, "Mimicry_Events_Decoy_RemoveInvisibility");
//END_REGION

//REGION QUAKE_SLAM
IF
ItemStatusAttempt(_Target, "LLMIME_LAUNCHED", (CHARACTERGUID)_Caster)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LLMIME_Skills_SpawnSkillPlatform(_Target, _Caster);
PlayEffectAtPosition("RS3_FX_SubEffects_Ground_Earthquake_01", _x, _y, _z);

IF
CharacterStatusApplied(_Target, "LLMIME_LAUNCHED", (CHARACTERGUID)_Caster)
AND
GetPosition(_Target, _x, _y, _z)
THEN
LLMIME_Skills_SpawnSkillPlatform(_Target, _Caster);
PlayEffectAtPosition("RS3_FX_SubEffects_Ground_Earthquake_01", _x, _y, _z);

IF
CharacterUsedSkill(_Caster, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "Shout_LLMIME_QuakeSlam")
AND
GetPosition(_Caster, _x, _y, _z)
THEN
PlayEffectAtPosition("LLMIME_FX_Skills_QuakeSlam_Cast_Root_01", _x, _y, _z);

PROC
LLMIME_Skills_SpawnSkillPlatform((GUIDSTRING)_Target, (CHARACTERGUID)_Caster)
AND
NOT DB_LLMIME_Skills_Temp_QuakeSlamTarget(_Target, _Caster, _, _, _, _, _)
AND
GetUUID(_Target, _UUID)
AND
LeaderLib_Random_QRY(400,900)
//LeaderLib_Random_QRY(1500,2000)
AND
DB_LeaderLib_Random(_TimerDelay)
AND
GetPosition(_Target, _x, _y, _z)
AND
IntegertoString(_TimerDelay, _TimerDelayStr)
AND
StringConcatenate(_UUID, _TimerDelayStr, _PlatformID)
AND
LeaderLIb_Platforms_QRY_SpawnPlatform(_PlatformID, "Large", 0, _x, _y, _z)
AND
DB_LeaderLib_Platforms(_PlatformID, _Platform)
AND
RealSum(_z, 0.1, _tz)
THEN
NOT DB_LeaderLib_Random(_TimerDelay);
//ApplyStatus(_Platform, "NECROFIRE", -1.0, 1); // Check if it gets spawned
PlayScaledEffectAtPosition("LLMIME_FX_Status_Launched_Apply_Root_01", 0.25, _x, _y, _z);
DB_LLMIME_Skills_Temp_QuakeSlamTarget(_Target, _Caster, _x, _y, _z, _Platform, _TimerDelay);
SetVarObject(_Target, "LLMIME_QuakeSlamCaster", _Caster);
TeleportToPosition(_Target, _x, _y, _tz, "LLMIME_Skills_QuakeSlam_FlyUpPillar", 0, 1);
LeaderLib_StartObjectTimer(_Platform, _TimerDelay, "Mimicry_Timers_RemovePlatformTimer_", "Mimicry_Events_Skills_RemovePlatform");
//LeaderLib_StartObjectTimer(_Target, 2000, "Mimicry_Timers_ResetAnimOverrideFailsafe_", "Mimicry_Events_Skills_ResetAnimationOverride");

IF
StoryEvent(_Target, "LLMIME_Skills_QuakeSlam_FlyUpPillar")
AND
DB_LLMIME_Skills_Temp_QuakeSlamTarget(_Target, _Caster, _x, _y, _z, _Platform, _TimerDelay)
THEN
LLMIME_Skills_Internal_MoveToPillar(_Target, _x, _y, _z, "LLMIME_Skills_QuakeSlam_SetKnockdownLoop");

PROC
LLMIME_Skills_Internal_MoveToPillar((GUIDSTRING)_Target, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_Event)
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
THEN
CharacterPurgeQueue(_Target);
CharacterSetAnimationOverride(_Target, "knockdown_loop");
CharacterMoveToPosition(_Target, _x, _y, _z, 1, _Event);
CharacterSetAnimationOverride(_Target, "knockdown_loop");

PROC
LLMIME_Skills_Internal_MoveToPillar((GUIDSTRING)_Target, (REAL)_x, (REAL)_y, (REAL)_z, (STRING)_Event)
AND
ObjectIsItem((ITEMGUID)_Target, 1)
THEN
ItemMoveToPosition(_Target, _x, _y, _z, 50.0, 25.0, _Event, 0);

IF
StoryEvent(_Target, "LLMIME_Skills_QuakeSlam_SetKnockdownLoop")
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Target, "KNOCKED_DOWN")
THEN
CharacterSetAnimationOverride(_Target, "knockdown_loop");

IF
StoryEvent(_Target, "Mimicry_Events_Skills_ResetAnimationOverride")
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
THEN
CharacterSetAnimationOverride(_Target, "");

IF
StoryEvent((ITEMGUID)_Platform, "Mimicry_Events_Skills_RemovePlatform")
AND
DB_LLMIME_Skills_Temp_QuakeSlamTarget(_Target, _Caster, _x, _y, _z, _Platform, _TimerDelay)
AND
RealSum(_z, -0.1, _tz)
AND
Real(_TimerDelay, _DelayR)
AND
RealProduct(_DelayR, 1.75, _EndTimerDelayR)
AND
Integer(_EndTimerDelayR, _EndTimerDelay)
THEN
NOT DB_LLMIME_Skills_Temp_QuakeSlamTarget(_Target, _Caster, _x, _y, _z, _Platform, _TimerDelay);
LeaderLib_Platforms_RemovePlatform(_Platform);
LLMIME_Skills_Internal_MoveToPillar(_Target, _x, _y, _tz, "LLMIME_Skills_QuakeSlam_SetKnockdownLoop");
LeaderLib_StartObjectTimer(_Target, _EndTimerDelay, "Mimicry_Timers_Skills_QuakeSlam_FinishLanding_", "Mimicry_Events_Skills_QuakeSlam_TargetLanded");

IF
StoryEvent(_Target, "Mimicry_Events_Skills_QuakeSlam_TargetLanded")
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
AND
GetVarObject(_Target, "LLMIME_QuakeSlamCaster", _Caster)
THEN
CharacterFlushQueue(_Target);
CharacterSetAnimationOverride(_Target, "");
ApplyStatus(_Target, "KNOCKED_DOWN", 6.0, 1, _Caster);

IF
StoryEvent(_Target, "Mimicry_Events_Skills_QuakeSlam_TargetLanded")
THEN
RemoveStatus(_Target, "LLMIME_LAUNCHED");
ClearVarObject(_Target, "LLMIME_QuakeSlamCaster");
//END_REGION

//REGION VITAL_INFLUENCE
IF
CharacterUsedSkillOnTarget(_Caster, (CHARACTERGUID)_Target, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "Target_LLMIME_VitalInfluence")
AND
LeaderLib_Helper_QRY_AttributeIsGreater(_Caster, _Target, "Constitution")
THEN
LeaderLog_Log("DEBUG", "[Mimicry:Skills:CharacterUsedSkillOnTarget] Prepared beam effects for [",_Skill,"].");
DB_LLMIME_Skills_Temp_BeamEffect(_Target, _Caster, _Skill, "LLMIME_FX_Skills_VitalInfluence_Beam_01", "Dummy_BodyFX", "Dummy_BodyFX");

IF
CharacterStatusAttempt(_Target, "LLMIME_VITAL_CHECK", (CHARACTERGUID)_Caster)
AND
LeaderLib_Helper_QRY_AttributeIsGreater(_Caster, _Target, "Constitution")
THEN
ApplyStatus(_Caster, "LLMIME_VITAL_BUFF", 12.0, 0, _Caster);
ApplyStatus(_Target, "LLMIME_VITAL_DEBUFF", 12.0, 0, _Caster);
RemoveStatus(_Target, "LLMIME_VITAL_CHECK");

IF
CharacterStatusAttempt(_Target, "LLMIME_VITAL_CHECK", (CHARACTERGUID)_Caster)
AND
NOT LeaderLib_Helper_QRY_HasStatus(_Target, "LLMIME_VITAL_DEBUFF")
THEN
CharacterStatusText(_Caster, "LLMIME_StatusText_VitalityCheck_Failed");
//END_REGION

//A.K.A. Mime Vault
//REGION FLANK_AND_SWAP
IF
//CharacterUsedSkillOnTarget(_Mime, (CHARACTERGUID)_Target, _Skill, _, _)
CharacterUsedSkill(_Mime, _Skill, _, _)
AND
LLMIME_Skills_QRY_SkillMatch(_Skill, "MultiStrike_LLMIME_MimeVault")
THEN
DB_LLMIME_Skills_Temp_LookForFlankingTarget(_Mime);

IF
CharacterStatusAttempt(_Target, "HIT", (CHARACTERGUID)_Mime)
AND
DB_LLMIME_Skills_Temp_LookForFlankingTarget(_Mime)
THEN
NOT DB_LLMIME_Skills_Temp_LookForFlankingTarget(_Mime);
ApplyStatus(_Target, "LLMIME_FLANKING", -1.0, 0, _Mime);
ObjectSetFlag(_Target, "LLMIME_FlankingApplied");
ProcObjectTimer(_Target, "Mimicry_FlankAndSwap_FlankingFailSafe", 1500);

//When the target is Grounded
PROC
ProcObjectTimerFinished((CHARACTERGUID)_Target, "Mimicry_FlankAndSwap_FlankingFailSafe")
AND
ObjectGetFlag(_Target, "LLMIME_FlankingApplied", 1)
THEN
ObjectClearFlag(_Target, "LLMIME_FlankingApplied", 1);
RemoveStatus(_Target, "LLMIME_FLANKING");
CharacterStatusText(_Target, "LLMIME_StatusText_SwappedFailed");

IF
CharacterStatusApplied(_Target, "LLMIME_SWAPPING", (CHARACTERGUID)_Mime)
THEN
ObjectClearFlag(_Target, "LLMIME_FlankingApplied", 1);
SetVarObject(_Mime, "LLMIME_SwapTarget", _Target);
PlayEffect(_Target, "RS3_FX_Skills_Void_Netherswap_Disappear_Overlay_01");
PlayEffect(_Mime, "RS3_FX_Skills_Void_Netherswap_Disappear_Overlay_01");
LeaderLib_StartCharacterCharacterTimer(_Mime, _Target, 500, "Mimicry_Timers_StartSwapping_", "Mimicry_FlankAndSwap_StartSwapping");

IF
CharacterCharacterEvent(_Mime, _Target, "Mimicry_FlankAndSwap_StartSwapping")
AND
GetPosition(_Target, _tx, _ty, _tz)
AND
GetPosition(_Mime, _mx, _my, _mz)
THEN
PlayEffectAtPosition("RS3_FX_Skills_Void_Netherswap_Disappear_Root_01", _tx, _ty, _tz);
PlayEffectAtPosition("RS3_FX_Skills_Void_Netherswap_Disappear_Root_01", _mx, _my, _mz);
CharacterSetDetached(_Target, 1);
CharacterSetDetached(_Mime, 1);
TeleportToPosition(_Target, _mx, _my, _mz, "", 0, 1);
TeleportToPosition(_Mime, _tx, _ty, _tz, "Mimicry_FlankAndSwap_MimeSwappedPlaces", 0, 1);

IF
//SkillCast(_Mime, "Teleportation_MimeVault_Swap", _, _)
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_FlankAndSwap_MimeSwappedPlaces")
AND
GetVarObject(_Mime, "LLMIME_SwapTarget", (CHARACTERGUID)_Target)
AND
GetPosition(_Target, _tx, _ty, _tz)
AND
GetPosition(_Mime, _mx, _my, _mz)
THEN
CharacterSetDetached(_Target, 0);
CharacterSetDetached(_Mime, 0);
CharacterLookAt(_Mime, _Target, 1);
ClearVarObject(_Mime, "LLMIME_SwapTarget");
RemoveStatus(_Target, "LLMIME_SWAPPING");
PlayEffectAtPosition("RS3_FX_Skills_Void_Netherswap_Reappear_01", _tx, _ty, _tz);
PlayEffectAtPosition("RS3_FX_Skills_Void_Netherswap_Reappear_01", _mx, _my, _mz);
CharacterStatusText(_Target, "LLMIME_StatusText_Swapped");

IF
CharacterStatusRemoved(_Target, "LLMIME_SWAPPING", _Mime)
AND
LeaderLib_Helper_QRY_HasStatus(_Target, "LLMIME_FLANKING")
THEN
RemoveStatus(_Target, "LLMIME_FLANKING");
//END_REGION

//REGION BEAM_EFFECTS
IF
SkillCast(_Caster, _Skill, _, _)
AND
DB_LLMIME_Skills_Temp_BeamEffect(_Caster, _Target, _Skill, _Effect, _CasterBone, _TargetBone)
THEN
NOT DB_LLMIME_Skills_Temp_BeamEffect(_Caster, _Target, _Skill, _Effect, _CasterBone, _TargetBone);
PlayBeamEffect(_Caster, _Target, _Effect, _CasterBone, _TargetBone);
LeaderLog_Log("DEBUG", "[Mimicry:Skills:SkillCast] Played beam effect [",_Effect,"].");

IF
SkillCast(_Caster, _Skill, _, _)
AND
DB_LLMIME_Skills_Temp_BeamEffect(_Target, _Caster, _Skill, _Effect, _CasterBone, _TargetBone)
THEN
NOT DB_LLMIME_Skills_Temp_BeamEffect(_Target, _Caster, _Skill, _Effect, _CasterBone, _TargetBone);
PlayBeamEffect(_Target, _Caster, _Effect, _CasterBone, _TargetBone);
//END_REGION

//REGION STEAL_WEAPON
IF
CharacterStatusApplied(_Target, "LLMIME_STEAL_WEAPON", (CHARACTERGUID)_Mime)
AND
LeaderUpdater_QRY_ModIsActive("WeaponExpansion", "LaughingLeader")
AND
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Mime)
AND
CharacterGetEquippedWeapon(_Target, _Weapon)
AND
_Weapon != NULL_00000000-0000-0000-0000-000000000000
AND
GetTemplate(_Weapon, _Template)
AND
DB_LLMIME_Skills_StealWeapon(_String, _ThrowingItemTemplate)
AND
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Mime)
AND
StringContains(_Template, _String, 1)
THEN
//CharacterAddSkill(_Mime, _Skill, 1);
ItemTemplateAddTo(_ThrowingItemTemplate, _Mime, 1, 1);
DB_LLMIME_Skills_Temp_WeaponMatch(_Mime);

//No match
IF
CharacterStatusApplied(_Target, "LLMIME_STEAL_WEAPON", (CHARACTERGUID)_Mime)
AND
LeaderUpdater_QRY_ModIsActive("WeaponExpansion", "LaughingLeader")
AND
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Mime)
AND
DB_LLMIME_Skills_StealWeapon("Rock", _ThrowingItemTemplate)
THEN
ItemTemplateAddTo(_ThrowingItemTemplate, _Mime, 1, 1);
DB_LLMIME_Skills_Temp_WeaponMatch(_Mime);

IF
CharacterStatusApplied(_Target, "LLMIME_STEAL_WEAPON", (CHARACTERGUID)_Mime)
AND
DB_LLMIME_Skills_Temp_WeaponMatch(_Mime)
THEN
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Mime);

/*
IF
SkillCast(_Mime, _Skill, _, _)
AND
DB_LLMIME_Skills_StealWeapon(_String, _Skill)
THEN
CharacterRemoveSkill(_Mime, _Skill);
*/
//END_REGION

//REGION COUNTER_THROW
IF
CharacterMissedBy(_Mime, _AttackerOwner, _Attacker)
AND
HasActiveStatus(_Mime, "LLMIME_COUNTER_THROW", 1)
AND
CharacterIsEnemy(_Mime, _Attacker, 1)
AND
LeaderUpdater_QRY_ModIsActive("WeaponExpansion", "LaughingLeader")
AND
LeaderLib_Roll_QRY(60)
THEN
CharacterUseSkill(_Mime, "Projectile_LLWEAPONEX_Throw_Rock_Instant", _Attacker, 0, 1, 1);
//END_REGION

//REGION CLEAR_TEMP_DATA
IF
CharacterDied(_Character)
AND
LLMIME_SKILLS_QRY_HasSkillData(_Character)
THEN
LLMIME_MonsterSkill_ClearTemporaryDatabases(_Character);

QRY
LLMIME_SKILLS_QRY_HasSkillData((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_NextWish(_Character, _Target)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_Character, _Target);

PROC
LLMIME_MonsterSkill_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_NextWish(_Character, _Target)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_Character, _Target);

PROC
LLMIME_MonsterSkill_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_NextWish(_OtherCharacter, _Character)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_OtherCharacter, _Character);

PROC
LLMIME_MonsterSkill_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_FailedWish(_Character)
THEN
NOT DB_LLMIME_Skills_Temp_FailedWish(_Character);

PROC
LLMIME_MonsterSkill_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_WishDelayTimer(_Character, _Target, _TimerName)
THEN
NOT DB_LLMIME_Skills_WishDelayTimer(_Character, _Target, _TimerName);
TimerCancel(_TimerName);

PROC
LLMIME_MonsterSkill_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_WishDelayTimer(_Caster, _Character, _TimerName)
THEN
NOT DB_LLMIME_Skills_WishDelayTimer(_Caster, _Character, _TimerName);
TimerCancel(_TimerName);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
