Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_System_InitSettings();
//DB_LLMIME_SkillData(_Skill, _SkillType, _SkillElement)
//DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
//DB_LLMIME_Templates(_Name, _Template)
//DB_LLMIME_Statuses(_Status)
//DB_LLMIME_MimeStatuses(_Status)
KBSECTION
//REGION SETTINGS
PROC
LLMIME_System_InitSettings()
THEN
LLLIB_Helper_ClearExistingDatabase("DB_LLMIME_PassiveData", 4);
DB_LLMIME_PassiveData("LLMIME_BRAWLER", "LLMIME_BRAWLER_BONUS", "LLMIME_BRAWLER_INFO", "Mimicry_HideMimePassives");
DB_LLMIME_PassiveData("LLMIME_BEASTMASTER", "LLMIME_BEASTMASTER", "LLMIME_BEASTMASTER_INFO", "Mimicry_HideMimePassives");
DB_LLMIME_PassiveData("LLMIME_CONCENTRATION", "LLMIME_CONCENTRATION_BONUS", "LLMIME_CONCENTRATION_INFO", "Mimicry_HideMimePassives");

LLMIME_System_InitTemplates();

LeaderLib_Register_StatusToggleSkill("Shout_LLMIME_DisableMimicking", "LLMIME_MIMICKING_DISABLED", -1.0, 1);

LLLIB_Helper_ClearExistingDatabase("DB_LLMIME_Statuses", 1);
DB_LLMIME_Statuses("LLMIME_UNARMED_BONUS_DAMAGE");
DB_LLMIME_Statuses("LLMIME_TOTEMRAGE");
DB_LLMIME_Statuses("LLMIME_BAD_BREATH");
DB_LLMIME_Statuses("LLMIME_TOAD");
DB_LLMIME_Statuses("LLMIME_FORCED_EVOLUTION");
LLLIB_Helper_ClearExistingDatabase("DB_LLMIME_MimickingStatuses", 1);
DB_LLMIME_MimickingStatuses("LLMIME_MIMICKING");
DB_LLMIME_MimickingStatuses("LLMIME_MIMICKING_FOLLOWER");
DB_LLMIME_MimickingStatuses("LLMIME_MIMICKING_SOURCE");
LLLIB_Helper_ClearExistingDatabase("DB_LLMIME_MimeStatuses", 1);
DB_LLMIME_MimeStatuses("LLMIME_MIMICKING_DISABLED");
DB_LLMIME_MimeStatuses("LLMIME_MIMIC_WEAPON_REQUIREMENTS");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_STANCE_CON");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_STANCE_CON_INFO");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_STANCE_STR");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_STANCE_STR_INFO");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_STANCE_FIN");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_STANCE_FIN_INFO");
//Passives
DB_LLMIME_MimeStatuses("LLMIME_MIME");
DB_LLMIME_MimeStatuses("LLMIME_MASK_INFO");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_BONUS");
DB_LLMIME_MimeStatuses("LLMIME_BRAWLER_INFO");
DB_LLMIME_MimeStatuses("LLMIME_BEASTMASTER");
DB_LLMIME_MimeStatuses("LLMIME_BEASTMASTER_INFO");
DB_LLMIME_MimeStatuses("LLMIME_BEASTMASTER_TYPECHECK");
DB_LLMIME_MimeStatuses("LLMIME_BEASTMASTER_MONSTERSKILL");
DB_LLMIME_MimeStatuses("LLMIME_CONCENTRATION");
DB_LLMIME_MimeStatuses("LLMIME_CONCENTRATION_BONUS");
DB_LLMIME_MimeStatuses("LLMIME_CONCENTRATION_INFO");
DB_LLMIME_MimeStatuses("LLMIME_SOURCE_REGENERATION_HIDDEN");

PROC
LLMIME_System_InitTemplates()
THEN
LLLIB_Helper_ClearExistingDatabase("DB_LLMIME_Templates", 2);
DB_LLMIME_Templates("Mask_A", "EQ_Armor_UNIQUE_LLMIME_MimeMask_A_8e66ce79-8c8e-4c22-a8ea-5a99977f4ea8");
DB_LLMIME_Templates("Mask_NoVisual", "EQ_Armor_LLMIME_MimeMask_NoVisual_38d7f6c3-ab60-43e5-b20c-f5faf06801dd");
DB_LLMIME_Templates("BrawlerFist", "WPN_LLMIME_BrawlerFist_e1bda904-93c2-4f6f-8136-1a547279fd1f");
DB_LLMIME_Templates("MimeManual", "WPN_LLMIME_BrawlerFist_e1bda904-93c2-4f6f-8136-1a547279fd1f");
DB_LLMIME_Templates("MusicBox", "UNIQUE_LLMIME_MusicBox_fd03b00c-5366-40e2-a8af-1d9f6a904ecb");
DB_LLMIME_Templates("MusicBox", "UNIQUE_LLMIME_MusicBox_Cracked_467b732e-c599-49b1-beb8-06e55f1dd140");
DB_LLMIME_Templates("MimeAmulet", "LOOT_MagicAmulet_LLMIME_SourceBlastImmunity_fcc27ec5-b83e-42e3-976e-90c269a52aed");
//END_REGION

//REGION UPDATE
PROC
LLMIME_System_UpdateDatabases()
THEN
LLMIME_System_InitSettings();
LeaderLog_Log("DEBUG", "[LLMIME:System:Core:UpdateDatabases] Settings updated.");
//END_REGION

//REGION MASK_TAG
/* For easy iteration */
IF
CharacterStatusApplied(_Mime, "LLMIME_MASK_INFO", _)
THEN
SetTag(_Mime, "Mimicry_WearingMask");

IF
CharacterStatusRemoved(_Mime, "LLMIME_MASK_INFO", _)
THEN
ClearTag(_Mime, "Mimicry_WearingMask");
//END_REGION

//REGION CLEAR_HELPERS
IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_RemoveAllMimicryStatuses")
THEN
LLMIME_RemoveAllModStatuses(_Mime);

PROC
LLMIME_RemoveAllModStatuses((CHARACTERGUID)_Character)
AND
DB_LLMIME_Statuses(_Status)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);

PROC
LLMIME_RemoveAllModStatuses((CHARACTERGUID)_Character)
AND
DB_LLMIME_MimeStatuses(_Status)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_ClearMimeBonuses")
THEN
LLMIME_RemoveAllMimeStatuses(_Mime);
ObjectClearFlag(_Mime, "Mimicry_MimeIsUnarmed");

PROC
LLMIME_RemoveAllMimeStatuses((CHARACTERGUID)_Character)
AND
DB_LLMIME_MimeStatuses(_Status)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);

PROC
LLMIME_RemoveAllMimeStatuses((CHARACTERGUID)_Character)
AND
DB_LLMIME_MimickingStatuses(_Status)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);
//END_REGION

//REGION HELPERS
PROC
LLMIME_RemoveMask((CHARACTERGUID)_Mime)
AND
CharacterFindTaggedItem(_Mime, "LLMIME_ACTIVATE_MIME", _Mask)
THEN
CharacterUnequipItem(_Mime, _Mask);

PROC
LLMIME_RefreshMask((CHARACTERGUID)_Mime)
THEN
LLMIME_RefreshMask(_Mime, 1000);

PROC
LLMIME_RefreshMask((CHARACTERGUID)_Mime, (INTEGER)_Delay)
AND
CharacterFindTaggedItem(_Mime, "LLMIME_ACTIVATE_MIME", _Mask)
AND
NOT DB_LLMIME_System_Temp_RefreshMask(_Mime, _Mask, _)
AND
GetUUID(_Mime, _MimeID)
AND
GetUUID(_Mask, _MaskID)
AND
LeaderLog_QRY_Log("COMBINE", "LLMIME_Timers_RefreshMask_", _MimeID, "_", _MaskID)
AND
DB_LeaderLog_Temp_CombinedString(_TimerName)
THEN
NOT DB_LeaderLog_Temp_CombinedString(_TimerName);
CharacterUnequipItem(_Mime, _Mask);
DB_LLMIME_System_Temp_RefreshMask(_Mime, _Mask, _TimerName);
TimerLaunch(_TimerName, _Delay);

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_System_Temp_RefreshMask(_Mime, _Mask, _TimerName)
THEN
NOT DB_LLMIME_System_Temp_RefreshMask(_Mime, _Mask, _TimerName);
CharacterEquipItem(_Mime, _Mask);
CharacterItemSetEvent(_Mime, _Mask, "Mimicry_MaskRefreshed");
//END_REGION

//REGION SKILL_DATA
/*
IF
CharacterUsedSkillAtPosition(_,_,_,_, _Skill, _SkillType)
THEN
LLMIME_System_UpdateSkillDataType(_Skill, _SkillType);

IF
CharacterUsedSkillOnTarget(_,_, _Skill, _SkillType)
THEN
LLMIME_System_UpdateSkillDataType(_Skill, _SkillType);

IF
CharacterUsedSkill(_, _Skill, _SkillElement)
THEN
LLMIME_System_UpdateSkillDataElement(_Skill, _SkillElement);

IF
SkillCast(_, _Skill, _SkillElement)
THEN
LLMIME_System_UpdateSkillDataElement(_Skill, _SkillElement);

PROC
LLMIME_System_UpdateSkillDataType((STRING)_Skill, (STRING)_SkillType)
AND
DB_LLMIME_SkillData(_Skill, _PastSkillType, _SkillElement)
AND
_PastSkillType != _SkillType
THEN
NOT DB_LLMIME_SkillData(_Skill, _PastSkillType, _SkillElement);
DB_LLMIME_SkillData(_Skill, _SkillType, _SkillElement);

PROC
LLMIME_System_UpdateSkillDataType((STRING)_Skill, (STRING)_SkillType)
AND
NOT DB_LLMIME_SkillData(_Skill, _SkillType, _)
THEN
DB_LLMIME_SkillData(_Skill, _SkillType, "");

PROC
LLMIME_System_UpdateSkillDataElement((STRING)_Skill, (STRING)_SkillElement)
AND
DB_LLMIME_SkillData(_Skill, _SkillType, _PastSkillElement)
AND
_PastSkillElement != _SkillElement
AND
_PastSkillElement == ""
AND
_SkillElement != ""
THEN
NOT DB_LLMIME_SkillData(_Skill, _SkillType, _PastSkillElement);
DB_LLMIME_SkillData(_Skill, _SkillType, _SkillElement);

PROC
LLMIME_System_UpdateSkillDataElement((STRING)_Skill, (STRING)_SkillElement)
AND
NOT DB_LLMIME_SkillData(_Skill, _, _SkillElement)
THEN
DB_LLMIME_SkillData(_Skill, "", _SkillElement);

QRY
LLMIME_QRY_SkillIsType((STRING)_Skill, (STRING)_CheckType)
AND
DB_LLMIME_SkillData(_Skill, _CheckType, _SkillElement)
THEN
DB_NOOP(1);
*/
//END_REGION

//REGION UNARMED_FLAG_QUERIES
QRY
LLMIME_QRY_WeaponIsBrawlerFist((ITEMGUID)_Item)
AND
IsTagged(_Item, "UNARMED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponIsBrawlerFist((ITEMGUID)_Item)
AND
IsTagged(_Item, "LLMIME_BrawlerFist", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponIsBrawlerFistTemplate((STRING)_Template)
AND
_Template == "WPN_LLMIME_BrawlerFist_e1bda904-93c2-4f6f-8136-1a547279fd1f"
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponIsUnarmed((ITEMGUID)_Item)
AND
LLMIME_QRY_WeaponIsBrawlerFist(_Item)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponIsUnarmed((ITEMGUID)_Item)
AND
_Item == NULL_00000000-0000-0000-0000-000000000000
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponEquippedInMainHand((CHARACTERGUID)_Mime)
AND
CharacterGetEquippedItem(_Mime, "Weapon", (ITEMGUID)_Item)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponEquippedInOffHand((CHARACTERGUID)_Mime)
AND
CharacterGetEquippedItem(_Mime, "Shield", (ITEMGUID)_Item)
AND
GetTemplate(_Item, _Template)
AND
StringContains(_Template, "_Shield_", 0)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_NoWeaponsEquipped((CHARACTERGUID)_Mime)
AND
NOT LLMIME_QRY_WeaponEquippedInMainHand(_Mime)
AND
NOT LLMIME_QRY_WeaponEquippedInOffHand(_Mime)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsWeapon((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Weapon", _Item)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsWeapon((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Shield", _Item)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
GetTemplate(_Item, _Template)
AND
StringContains(_Template, "_Shield_", 0)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsInWeaponSlot((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Weapon", _Item)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsInWeaponSlot((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Shield", _Item)
THEN
DB_NOOP(1);
//END_REGION

//REGION UNARMED_FLAG_EVENTS
IF
ItemEquipped(_Item, _Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
LLMIME_QRY_ItemIsWeapon(_Mime, _Item)
THEN
LLMIME_System_FlagForUnarmed(_Mime);

IF
ItemUnEquipped(_Item, _Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "Mimicry_MimeIsUnarmed", 0)
AND
LLMIME_QRY_NoWeaponsEquipped(_Mime)
THEN
LLMIME_System_FlagForUnarmed(_Mime);

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_MimeInitialized")
THEN
LLMIME_System_FlagForUnarmed(_Mime);
LeaderLib_StartObjectTimer(_Mime, 50, "LLMIME_Timers_CheckUnarmed_", "Mimicry_CheckUnarmed");

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_CheckUnarmed")
AND
ObjectGetFlag(_Mime, "Mimicry_MimeIsUnarmed", 1)
THEN
LLMIME_System_ToggleBrawlerBonus(_Mime);
LLMIME_System_ToggleConcentrationBonus(_Mime);

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_CheckUnarmed")
AND
ObjectGetFlag(_Mime, "Mimicry_MimeIsUnarmed", 0)
THEN
LLMIME_System_FlagForUnarmed(_Mime);

PROC
LLMIME_System_FlagForUnarmed((CHARACTERGUID)_Mime)
AND
NOT DB_LLMIME_Temp_JustSetUnarmedFlag(_Mime)
AND
ObjectGetFlag(_Mime, "Mimicry_MimeIsUnarmed", 0)
AND
LLMIME_QRY_NoWeaponsEquipped(_Mime)
THEN
ObjectSetFlag(_Mime, "Mimicry_MimeIsUnarmed");
DB_LLMIME_Temp_JustSetUnarmedFlag(_Mime);

PROC
LLMIME_System_FlagForUnarmed((CHARACTERGUID)_Mime)
AND
NOT DB_LLMIME_Temp_JustSetUnarmedFlag(_Mime)
AND
ObjectGetFlag(_Mime, "Mimicry_MimeIsUnarmed", 1)
AND
NOT LLMIME_QRY_NoWeaponsEquipped(_Mime)
THEN
ObjectClearFlag(_Mime, "Mimicry_MimeIsUnarmed");
DB_LLMIME_Temp_JustSetUnarmedFlag(_Mime);

PROC
LLMIME_System_FlagForUnarmed((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Temp_JustSetUnarmedFlag(_Mime)
THEN
NOT DB_LLMIME_Temp_JustSetUnarmedFlag(_Mime);
//END_REGION

//REGION UNARMED_BRAWLER_BONUS
IF
ObjectFlagSet("Mimicry_MimeIsUnarmed", (CHARACTERGUID)_Mime, _)
THEN
LLMIME_System_ToggleBrawlerBonus(_Mime);

IF
ObjectFlagCleared("Mimicry_MimeIsUnarmed", (CHARACTERGUID)_Mime, _)
THEN
LLMIME_System_ToggleBrawlerBonus(_Mime);

PROC
LLMIME_System_ToggleBrawlerBonus((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER", 1)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER_BONUS", 0)
THEN
ApplyStatus(_Mime, "LLMIME_BRAWLER_BONUS", -1.0, 1);

PROC
LLMIME_System_ToggleBrawlerBonus((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER", 0)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER_BONUS", 1)
THEN
RemoveStatus(_Mime, "LLMIME_BRAWLER_BONUS");
//END_REGION

//REGION CONCENTRATION_BONUS
IF
ObjectFlagSet("Mimicry_MimeIsUnarmed", (CHARACTERGUID)_Mime, _)
THEN
LLMIME_System_ToggleConcentrationBonus(_Mime);

IF
ObjectFlagCleared("Mimicry_MimeIsUnarmed", (CHARACTERGUID)_Mime, _)
THEN
LLMIME_System_ToggleConcentrationBonus(_Mime);

PROC
LLMIME_System_ToggleConcentrationBonus((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION", 1)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION_BONUS", 0)
THEN
ApplyStatus(_Mime, "LLMIME_CONCENTRATION_BONUS", -1.0, 1);

PROC
LLMIME_System_ToggleConcentrationBonus((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION", 0)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION_BONUS", 1)
THEN
RemoveStatus(_Mime, "LLMIME_CONCENTRATION_BONUS");
//END_REGION

//REGION PASSIVE_INFO
IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_ClearMimeBonuses")
AND
CharacterGetDisplayName(_Mime, _, _Name)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Mimicry_ClearMimeBonuses] Clearing mime bonuses for [",_Name,"].");

IF
StoryEvent((CHARACTERGUID)_Mime, "Mimicry_ClearMimeBonuses")
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _Status, 1)
THEN
RemoveStatus(_Mime, _Status);

IF
CharacterStatusRemoved(_Mime, _Status, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _BonusStatus, 1)
THEN
RemoveStatus(_Mime, _BonusStatus);

IF
GameStarted(_,_)
AND
DB_IsPlayer(_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _BonusStatus, 1)
AND
HasActiveStatus(_Mime, _InfoStatus, 0)
AND
NOT ObjectGetFlag(_Mime, _DisableFlag, 1)
THEN
ApplyStatus(_Mime, _InfoStatus, -1.0, 1);

IF
CharacterStatusApplied(_Mime, _BonusStatus, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
NOT ObjectGetFlag(_Mime, _DisableFlag, 1)
AND
HasActiveStatus(_Mime, _InfoStatus, 0)
THEN
ApplyStatus(_Mime, _InfoStatus, -1.0, 1);

IF
CharacterStatusRemoved(_Mime, _BonusStatus, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _InfoStatus, 1)
THEN
RemoveStatus(_Mime, _InfoStatus);

IF
ObjectFlagCleared(_DisableFlag, _Mime, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _Status, 1)
AND
HasActiveStatus(_Mime, _BonusStatus, 1)
AND
HasActiveStatus(_Mime, _InfoStatus, 0)
THEN
ApplyStatus(_Mime, _InfoStatus, -1.0, 1);

IF
ObjectFlagSet(_DisableFlag, _Mime, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _InfoStatus, 1)
THEN
RemoveStatus(_Mime, _InfoStatus);
//END_REGION

//REGION CONDITION_QUERIES
QRY
LLMIME_QRY_CharacterIsAMime((CHARACTERGUID)_Character)
AND
IsTagged(_Character, "Mimicry_Mime", 1)
AND
IsTagged(_Character, "LLMIME_Dummy", 0)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_CharacterIsAMime((CHARACTERGUID)_Character)
AND
HasActiveStatus(_Character, "LLMIME_MIME", 1)
AND
IsTagged(_Character, "LLMIME_Dummy", 0)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_CharacterIsAMime((CHARACTERGUID)_Character)
AND
DB_LLMIME_Mimicking_MimicNextAction(_Character)
AND
IsTagged(_Character, "LLMIME_Dummy", 0)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_NotSolo((CHARACTERGUID)_Mime)
AND
GetVarInteger(_Mime, "LeaderLib_PartyCount", _Count)
AND
_Count > 1
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_NotSolo((CHARACTERGUID)_Mime)
AND
LLMIME_QRY_Internal_PartyCountNotSet(_Mime)
AND
LeaderLib_Party_QRY_CountParties()
AND
GetVarInteger(_Mime, "LeaderLib_PartyCount", _Count)
AND
_Count > 1
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_Internal_PartyCountNotSet((CHARACTERGUID)_Character)
AND
NOT GetVarInteger(_Character, "LeaderLib_PartyCount", _)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_Internal_PartyCountNotSet((CHARACTERGUID)_Character)
AND
GetVarInteger(_Character, "LeaderLib_PartyCount", 0)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeShouldBeMimicking((CHARACTERGUID)_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_MIMICKING_DISABLED", 0)
AND
CharacterIsInCombat(_Mime, 0)
AND
GlobalGetFlag("Mimicry_Mimic_CombatOnlyDisabled", 1)
AND
LLMIME_QRY_NotSolo(_Mime)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeShouldBeMimicking((CHARACTERGUID)_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_MIMICKING_DISABLED", 0)
AND
CharacterIsInCombat(_Mime, 1)
AND
LLMIME_QRY_NotSolo(_Mime)
AND
NOT LeaderLib_Combat_QRY_IsActiveTurn(_Mime)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeIsCurrentlyMimicking((CHARACTERGUID)_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
DB_LLMIME_Mimicking_MimicFailTimer(_TimerName, _Mime, _Caster, _Action, _ActionType)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeIsCurrentlyMimicking((CHARACTERGUID)_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
NOT DB_LLMIME_Mimicking_MimicFailTimer(_, _Mime, _, _, _)
AND
ObjectGetFlag(_Mime, "Mimicry_IsMimicking", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_HasMaskEquipped((CHARACTERGUID)_Mime)
AND
CharacterGetEquippedItem(_Mime, "Helmet", _Mask)
AND
GetTemplate(_Mask, _Template)
AND
LLMIME_QRY_IsMaskTemplate(_Template)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_IsMaskTemplate((STRING)_Template)
AND
DB_LLMIME_Templates("Mask_A", _Template)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_IsMaskTemplate((STRING)_Template)
AND
DB_LLMIME_Templates("Mask_NoVisual", _Template)
THEN
DB_NOOP(1);
//END_REGION

//REGION RESET_EVENTS
IF
ObjectLeftCombat((CHARACTERGUID)_Mime, _CombatID)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
SetStoryEvent(_Mime, "Mimicry_ResetMimeCombatData");

IF
CharacterDied(_Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
THEN
SetStoryEvent(_Mime, "Mimicry_ResetMimeCombatData");
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
