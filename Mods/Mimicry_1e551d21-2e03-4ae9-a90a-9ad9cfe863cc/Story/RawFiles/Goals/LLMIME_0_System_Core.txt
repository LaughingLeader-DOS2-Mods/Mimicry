Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_System_InitSettings();
//DB_LLMIME_SkillData(_Skill, _SkillType, _SkillElement)
//DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
//DB_LLMIME_Templates(_Name, _Template)
KBSECTION
//REGION SETTINGS
PROC
LLMIME_System_InitSettings()
THEN
DB_LLMIME_PassiveData("LLMIME_BRAWLER", "LLMIME_BRAWLER_BONUS", "LLMIME_BRAWLER_INFO", "LLMIME_HideMimePassives");
DB_LLMIME_PassiveData("LLMIME_BEASTMASTER", "LLMIME_BEASTMASTER", "LLMIME_BEASTMASTER_INFO", "LLMIME_HideMimePassives");
DB_LLMIME_PassiveData("LLMIME_CONCENTRATION", "LLMIME_CONCENTRATION_BONUS", "LLMIME_CONCENTRATION_INFO", "LLMIME_HideMimePassives");

DB_LLMIME_Templates("Mask_A", "EQ_Armor_UNIQUE_LLMIME_MimeMask_A_8e66ce79-8c8e-4c22-a8ea-5a99977f4ea8");
DB_LLMIME_Templates("BrawlerFist", "WPN_LLMIME_BrawlerFist_e1bda904-93c2-4f6f-8136-1a547279fd1f");
DB_LLMIME_Templates("MimeManual", "WPN_LLMIME_BrawlerFist_e1bda904-93c2-4f6f-8136-1a547279fd1f");

LeaderLib_Register_StatusToggleSkill("Shout_LLMIME_BrawlerStance", "LLMIME_BRAWLER_STANCE", -1.0, 1);

DB_LLMIME_Statuses("LLMIME_MIMICKING");
DB_LLMIME_Statuses("LLMIME_MIMIC_WEAPON_REQUIREMENTS");
DB_LLMIME_Statuses("LLMIME_MIMIC_ATTACK_ROOT");
DB_LLMIME_Statuses("LLMIME_BRAWLER_STANCE");
DB_LLMIME_Statuses("LLMIME_MIME");
DB_LLMIME_Statuses("LLMIME_BRAWLER");
DB_LLMIME_Statuses("LLMIME_BRAWLER_BONUS");
DB_LLMIME_Statuses("LLMIME_UNARMED_BONUS_HIT");
DB_LLMIME_Statuses("LLMIME_BEASTMASTER");
DB_LLMIME_Statuses("LLMIME_BEASTMASTER_TYPECHECK");
DB_LLMIME_Statuses("LLMIME_BEASTMASTER_MONSTERSKILL");
DB_LLMIME_Statuses("LLMIME_CONCENTRATION");
DB_LLMIME_Statuses("LLMIME_CONCENTRATION_BONUS");
DB_LLMIME_Statuses("LLMIME_BRAWLER_INFO");
DB_LLMIME_Statuses("LLMIME_BEASTMASTER_INFO");
DB_LLMIME_Statuses("LLMIME_CONCENTRATION_INFO");
DB_LLMIME_Statuses("LLMIME_MASK_INFO");
//END_REGION

//REGION CLEAR_HELPERS
PROC
LLMIME_RemoveAllModStatuses((CHARACTERGUID)_Character)
AND
DB_LLMIME_Statuses(_Status)
AND
HasActiveStatus(_Character, _Status, 1)
THEN
RemoveStatus(_Character, _Status);

IF
CharacterStatusApplied(_Mime, "LLMIME_MIME", _)
THEN
SetStoryEvent(_Mime, "LLMIME_Events_ApplyMimeBonuses");

IF
CharacterStatusRemoved(_Mime, "LLMIME_MIME", _)
THEN
SetStoryEvent(_Mime, "LLMIME_Events_ClearMimeBonuses");

IF
StoryEvent((CHARACTERGUID)_Mime, "LLMIME_Events_ClearMimeBonuses")
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 1)
THEN
ObjectClearFlag(_Mime, "LLMIME_UNARMED");

IF
StoryEvent((CHARACTERGUID)_Mime, "LLMIME_Events_ClearMimeBonuses")
THEN
LLMIME_RemoveAllModStatuses(_Mime);
//END_REGION

//REGION SKILL_DATA
IF
CharacterUsedSkillAtPosition(_,_,_,_, _Skill, _SkillType)
THEN
LLMIME_System_UpdateSkillDataType(_Skill, _SkillType);

IF
CharacterUsedSkillOnTarget(_,_, _Skill, _SkillType)
THEN
LLMIME_System_UpdateSkillDataType(_Skill, _SkillType);

IF
CharacterUsedSkill(_, _Skill, _SkillElement)
THEN
LLMIME_System_UpdateSkillDataElement(_Skill, _SkillElement);

IF
SkillCast(_, _Skill, _SkillElement)
THEN
LLMIME_System_UpdateSkillDataElement(_Skill, _SkillElement);

PROC
LLMIME_System_UpdateSkillDataType((STRING)_Skill, (STRING)_SkillType)
AND
DB_LLMIME_SkillData(_Skill, _PastSkillType, _SkillElement)
AND
_PastSkillType != _SkillType
THEN
NOT DB_LLMIME_SkillData(_Skill, _PastSkillType, _SkillElement);
DB_LLMIME_SkillData(_Skill, _SkillType, _SkillElement);

PROC
LLMIME_System_UpdateSkillDataType((STRING)_Skill, (STRING)_SkillType)
AND
NOT DB_LLMIME_SkillData(_Skill, _SkillType, _)
THEN
DB_LLMIME_SkillData(_Skill, _SkillType, "");

PROC
LLMIME_System_UpdateSkillDataElement((STRING)_Skill, (STRING)_SkillElement)
AND
DB_LLMIME_SkillData(_Skill, _SkillType, _PastSkillElement)
AND
_PastSkillElement != _SkillElement
THEN
NOT DB_LLMIME_SkillData(_Skill, _SkillType, _PastSkillElement);
DB_LLMIME_SkillData(_Skill, _SkillType, _SkillElement);

PROC
LLMIME_System_UpdateSkillDataElement((STRING)_Skill, (STRING)_SkillElement)
AND
NOT DB_LLMIME_SkillData(_Skill, _, _SkillElement)
THEN
DB_LLMIME_SkillData(_Skill, "", _SkillElement);

QRY
LLMIME_QRY_SkillIsType((STRING)_Skill, (STRING)_CheckType)
AND
DB_LLMIME_SkillData(_Skill, _CheckType, _SkillElement)
THEN
DB_NOOP(1);
//END_REGION

//REGION UNARMED_FLAG
QRY
LLMIME_QRY_WeaponIsBrawlerFist((ITEMGUID)_Item)
AND
IsTagged(_Item, "UNARMED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponIsBrawlerFist((ITEMGUID)_Item)
AND
IsTagged(_Item, "LLMIME_BrawlerFist", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponIsBrawlerFistTemplate((STRING)_Template)
AND
_Template == "WPN_LLMIME_BrawlerFist_e1bda904-93c2-4f6f-8136-1a547279fd1f"
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponEquippedInMainHand((CHARACTERGUID)_Mime)
AND
CharacterGetEquippedItem(_Mime, "Weapon", (ITEMGUID)_Item)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_WeaponEquippedInOffHand((CHARACTERGUID)_Mime)
AND
CharacterGetEquippedItem(_Mime, "Shield", (ITEMGUID)_Item)
AND
GetTemplate(_Item, _Template)
AND
StringContains(_Template, "_Shield_", 0)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_NoWeaponsEquipped((CHARACTERGUID)_Mime)
AND
NOT LLMIME_QRY_WeaponEquippedInMainHand(_Mime)
AND
NOT LLMIME_QRY_WeaponEquippedInOffHand(_Mime)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsWeapon((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Weapon", _Item)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsWeapon((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Shield", _Item)
AND
NOT LLMIME_QRY_WeaponIsBrawlerFist(_Item)
AND
GetTemplate(_Item, _Template)
AND
StringContains(_Template, "_Shield_", 0)
AND
NOT IsTagged(_Item, "LLMIME_MIMICKED_WEAPON", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsInWeaponSlot((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Weapon", _Item)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_ItemIsInWeaponSlot((CHARACTERGUID)_Mime, (ITEMGUID)_Item)
AND
CharacterGetEquippedItem(_Mime, "Shield", _Item)
THEN
DB_NOOP(1);

IF
ItemEquipped(_Item, _Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
LLMIME_QRY_ItemIsWeapon(_Mime, _Item)
THEN
ObjectClearFlag(_Mime, "LLMIME_UNARMED");

IF
ItemUnEquipped(_Item, _Mime)
AND
LLMIME_QRY_CharacterIsAMime(_Mime)
AND
ObjectGetFlag(_Mime, "LLMIME_UNARMED", 0)
AND
LLMIME_QRY_NoWeaponsEquipped(_Mime)
THEN
ObjectSetFlag(_Mime, "LLMIME_UNARMED");

IF
CharacterStatusApplied(_Mime, "LLMIME_MIME", _)
THEN
LLMIME_System_FlagForUnarmed(_Mime);

PROC
LLMIME_System_FlagForUnarmed((CHARACTERGUID)_Mime)
AND
LLMIME_QRY_NoWeaponsEquipped(_Mime)
THEN
ObjectSetFlag(_Mime, "LLMIME_UNARMED");

PROC
LLMIME_System_FlagForUnarmed((CHARACTERGUID)_Mime)
AND
NOT LLMIME_QRY_NoWeaponsEquipped(_Mime)
THEN
ObjectClearFlag(_Mime, "LLMIME_UNARMED");
//END_REGION

//REGION UNARMED_BRAWLER_BONUS
IF
ObjectFlagSet("LLMIME_UNARMED", (CHARACTERGUID)_Mime, _)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER", 1)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER_BONUS", 0)
THEN
ApplyStatus(_Mime, "LLMIME_BRAWLER_BONUS", -1.0, 1);

IF
ObjectFlagCleared("LLMIME_UNARMED", (CHARACTERGUID)_Mime, _)
AND
HasActiveStatus(_Mime, "LLMIME_BRAWLER_BONUS", 1)
THEN
RemoveStatus(_Mime, "LLMIME_BRAWLER_BONUS");
//END_REGION

//REGION CONCENTRATION_BONUS
IF
ObjectFlagSet("LLMIME_UNARMED", (CHARACTERGUID)_Mime, _)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION", 1)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION_BONUS", 0)
THEN
ApplyStatus(_Mime, "LLMIME_CONCENTRATION_BONUS", -1.0, 1);

IF
ObjectFlagCleared("LLMIME_UNARMED", (CHARACTERGUID)_Mime, _)
AND
HasActiveStatus(_Mime, "LLMIME_CONCENTRATION_BONUS", 1)
THEN
RemoveStatus(_Mime, "LLMIME_CONCENTRATION_BONUS");
//END_REGION

//REGION PASSIVE_INFO
IF
StoryEvent((CHARACTERGUID)_Mime, "LLMIME_Events_ClearMimeBonuses")
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _Status, 1)
THEN
RemoveStatus(_Mime, _Status);

IF
CharacterStatusRemoved(_Mime, _Status, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _BonusStatus, 1)
THEN
RemoveStatus(_Mime, _BonusStatus);

IF
CharacterStatusApplied(_Mime, _BonusStatus, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
NOT UserGetFlag(_Mime, _DisableFlag, 1)
AND
HasActiveStatus(_Mime, _InfoStatus, 0)
THEN
ApplyStatus(_Mime, _InfoStatus, -1.0, 1);

IF
CharacterStatusRemoved(_Mime, _BonusStatus, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _InfoStatus, 1)
THEN
RemoveStatus(_Mime, _InfoStatus);

IF
ObjectFlagSet(_DisableFlag, _Mime, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _Status, 1)
AND
HasActiveStatus(_Mime, _BonusStatus, 1)
AND
HasActiveStatus(_Mime, _InfoStatus, 0)
THEN
ApplyStatus(_Mime, _InfoStatus, -1.0, 1);

IF
ObjectFlagCleared(_DisableFlag, _Mime, _)
AND
DB_LLMIME_PassiveData(_Status, _BonusStatus, _InfoStatus, _DisableFlag)
AND
HasActiveStatus(_Mime, _InfoStatus, 1)
THEN
RemoveStatus(_Mime, _InfoStatus);
//END_REGION

//REGION CONDITION_QUERIES
QRY
LLMIME_QRY_CharacterIsAMime((CHARACTERGUID)_Character)
AND
IsTagged(_Character, "LLMIME_MIME", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_CharacterIsAMime((CHARACTERGUID)_Character)
AND
DB_LLMIME_Mimicking_MimicNextAction(_Character)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeShouldBeMimicking((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_MIME", 1)
AND
GlobalGetFlag("Mimicry_Mimic_CombatOnlyDisabled", 1)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeShouldBeMimicking((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_MIME", 1)
AND
NOT GlobalGetFlag("Mimicry_Mimic_CombatOnlyDisabled", 1)
AND
CharacterIsInCombat(_Mime, 1)
AND
NOT DB_LeaderLib_Combat_ActiveObject(_, _Mime)
THEN
DB_NOOP(1);

QRY
LLMIME_QRY_MimeIsCurrentlyMimicking((CHARACTERGUID)_Mime)
AND
HasActiveStatus(_Mime, "LLMIME_MIME", 1)
AND
DB_LLMIME_Mimicking_MimicFailTimer(_TimerName, _Mime, _Caster, _Action, _ActionType)
THEN
DB_NOOP(1);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
