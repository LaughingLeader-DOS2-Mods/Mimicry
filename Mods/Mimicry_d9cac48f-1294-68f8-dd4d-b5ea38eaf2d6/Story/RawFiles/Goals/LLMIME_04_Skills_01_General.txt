Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLMIME_Skills_InitSettings();
KBSECTION
//REGION SETTINGS
PROC
LLMIME_Skills_InitSettings()
THEN
SysClear("DB_LLMIME_Skills_DecoyTags", 1);
DB_LLMIME_Skills_DecoyTags("LLMIME_Decoy");
DB_LLMIME_Skills_DecoyTags("AI_PREFERRED_TARGET");
DB_LLMIME_Skills_DecoyTags("IGNORE_UNDEAD_CRIME");
DB_LLMIME_Skills_DecoyTags("IGNORESEENCOMBAT");
DB_LLMIME_Skills_DecoyTags("IGNOREVANDALISE");

SysClear("DB_LLMIME_Skills_StealWeapon", 2);
DB_LLMIME_Skills_StealWeapon("Axe_1H", "THR_LLWEAPONEX_Throwing_Axe1H_50a05d6a-90c5-44b7-aeae-c8329550e283");
DB_LLMIME_Skills_StealWeapon("Axe_2H", "THR_LLWEAPONEX_Throwing_Axe2H_5f83d71c-d529-4363-bd8b-33eb433c81c8");
DB_LLMIME_Skills_StealWeapon("_Bow_", "THR_LLWEAPONEX_Throwing_Bow_2473fceb-8232-4265-80e8-8e1b3d13c193");
DB_LLMIME_Skills_StealWeapon("_Crossbow_", "THR_LLWEAPONEX_Throwing_Crossbow_c40ef0c4-74a8-47f4-a31b-73ea3b56ae8c");
DB_LLMIME_Skills_StealWeapon("_Dagger_", "THR_LLWEAPONEX_Throwing_Dagger_63896c15-2c42-40c6-a032-5415039ea03e");
DB_LLMIME_Skills_StealWeapon("Mace_1H", "THR_LLWEAPONEX_Throwing_Mace1H_68f7e90e-ac76-40b9-8fdf-fa82e8b058f8");
DB_LLMIME_Skills_StealWeapon("Mace_2H", "THR_LLWEAPONEX_Throwing_Mace2H_4327c16c-e992-4445-8e16-e38ebb2bfd34");
DB_LLMIME_Skills_StealWeapon("_Scythe_", "THR_LLWEAPONEX_Throwing_Scythe_7a4acd18-b18a-46e9-ae80-2deca72f110e");
DB_LLMIME_Skills_StealWeapon("_Shield_", "THR_LLWEAPONEX_Throwing_Shield_8916a325-b0b4-4bb0-a0bb-d3c8740832c4");
DB_LLMIME_Skills_StealWeapon("_Sickle_", "THR_LLWEAPONEX_Throwing_Sickle_a64ebf8f-66c3-4bef-924c-ae8ecffe96ba");
DB_LLMIME_Skills_StealWeapon("_Spear_", "THR_LLWEAPONEX_Throwing_Spear_46d7a5f4-dd51-498f-a2e5-7fc3d2c97b6a");
DB_LLMIME_Skills_StealWeapon("_Staff_", "THR_LLWEAPONEX_Throwing_Staff_9a7d3a8d-f55e-4bd0-8073-cda53953a102");
DB_LLMIME_Skills_StealWeapon("Sword_1H", "THR_LLWEAPONEX_Throwing_Sword1H_34fc51f7-87d1-4d36-ac49-6df9d1d32155");
DB_LLMIME_Skills_StealWeapon("Sword_2H", "THR_LLWEAPONEX_Throwing_Sword2H_56e4cc0d-1f96-4930-a33f-93ca33a28018");
DB_LLMIME_Skills_StealWeapon("_Wand_", "THR_LLWEAPONEX_Throwing_Wand_97f3844d-100e-49a0-8814-eed74c040bb1");
DB_LLMIME_Skills_StealWeapon("Chair", "THR_LLWEAPONEX_Throwing_Chair_01_ef9f3937-a609-45cb-999c-9178a02eb7ca");
DB_LLMIME_Skills_StealWeapon("Rock", "THR_LLWEAPONEX_Throwing_Rock_eb7b3d1f-43f8-43c3-b529-2713eba49000");
//DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target)
//DB_LLMIME_Skills_Temp_FailedWish(_Caster)

SysClear("DB_LLMIME_Skills_IncarnateInfusions", 2);
DB_LLMIME_Skills_IncarnateInfusions("INF_ACID", "INF_ACID_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_BLESSED_ICE", "INF_BLESSED_ICE_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_BLOOD", "INF_BLOOD_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_CURSED_ELECTRIC", "INF_CURSED_ELECTRIC_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_ELECTRIC", "INF_ELECTRIC_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_FIRE", "INF_FIRE_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_NECROFIRE", "INF_NECROFIRE_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_OIL", "INF_OIL_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_POISON", "INF_POISON_G");
DB_LLMIME_Skills_IncarnateInfusions("INF_POWER", "INF_POWER");
DB_LLMIME_Skills_IncarnateInfusions("INF_RANGED", "INF_RANGED");
DB_LLMIME_Skills_IncarnateInfusions("INF_SHADOW", "INF_SHADOW");
DB_LLMIME_Skills_IncarnateInfusions("INF_WARP", "INF_WARP");
DB_LLMIME_Skills_IncarnateInfusions("INF_WATER", "INF_WATER_G");

DB_LLMIME_Skills_FlankAndAwap_PreserveStatuses("KNOCKED_DOWN");
DB_LLMIME_Skills_FlankAndAwap_PreserveStatuses("FROZEN");
DB_LLMIME_Skills_FlankAndAwap_PreserveStatuses("PETRIFIED");

PROC
LLMIME_Skills_InitSettings()
AND
NOT DB_LLMIME_ShadowForm_SmokeSurfaces(_)
THEN
DB_LLMIME_ShadowForm_SmokeSurfaces("SurfaceSmokeCloud");
DB_LLMIME_ShadowForm_SmokeSurfaces("SurfaceSmokeCloudBlessed");
DB_LLMIME_ShadowForm_SmokeSurfaces("SurfaceSmokeCloudCursed");
DB_LLMIME_ShadowForm_SmokeSurfaces("SurfaceSmokeCloudPurified");

QRY
LLMIME_ShadowForm_IsInConcealedSurface((CHARACTERGUID)_Char)
AND
DB_LLMIME_ShadowForm_SmokeSurfaces(_Surface)
AND
LeaderLib_Helper_QRY_IsInSurface((GUIDSTRING)_Char, _Surface)
THEN
DB_NOOP(1);
//END_REGION

//REGION UPDATING
PROC
LeaderUpdater_ModUpdated("Mimicry", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 1,2,0,0)
THEN
LeaderLog_Log("DEBUG", "[LLMIME:Skills] Updating settings from version [",_PastVersion,"]");
LLMIME_Skills_InitSettings();

// [BEGIN_NO_OSITOOLS]
PROC
LeaderUpdater_ModUpdated("Mimicry", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
DB_LLMIME_ActiveMimes(_Mime)
AND
CharacterHasSkill(_Mime, "Target_LLMIME_SetFacingDirection", 1)
THEN
CharacterRemoveSkill(_Mime, "Target_LLMIME_SetFacingDirection");
// [END_NO_OSITOOLS]

/* [OSITOOLS_ONLY]
PROC
LeaderUpdater_ModUpdated("Mimicry", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
DB_LLMIME_ActiveMimes(_Mime)
AND
NRD_SkillBarFindSkill(_Mime, "Target_LLMIME_SetFacingDirection", _Slot)
THEN
CharacterRemoveSkill(_Mime, "Target_LLMIME_SetFacingDirection");
NRD_SkillBarSetSkill(_Mime, _Slot, "Zone_LLMIME_SetFacingDirection");
*/
//END_REGION

//REGION QUERIES
QRY
LLMIME_Skills_QRY_SkillMatch((STRING)_Skill, (STRING)_CheckedSkill)
AND
_Skill == _CheckedSkill
THEN
DB_NOOP(1);

//Follower versions
QRY
LLMIME_Skills_QRY_SkillMatch((STRING)_Skill, (STRING)_CheckedSkill)
AND
StringConcatenate(_CheckedSkill, "_Follower", _Skill)
THEN
DB_NOOP(1);

QRY
LLMIME_Skills_QRY_CharacterIsDisabled((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_DisabledCharacter(_Character, _)
THEN
DB_NOOP(1);
//END_REGION

//REGION WISH
IF
CharacterUsedSkillOnTarget(_Character, _Target, "Target_LLMIME_Wish", _, _)
THEN
LLMIME_Skills_OnSkillUsed(_Character, _Target, "Wish");

IF
CharacterUsedSkillOnTarget(_Character, _Target, "Target_LLMIME_Wish_Follower", _, _)
THEN
LLMIME_Skills_OnSkillUsed(_Character, _Target, "Wish");

PROC
LLMIME_Skills_OnSkillUsed((CHARACTERGUID)_Caster, (GUIDSTRING)_Target, "Wish")
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
AND
CharacterGetHitpointsPercentage(_Caster, _CasterHealth)
AND
_CasterHealth > 2.0
AND
RealDivide(_CasterHealth, 2.0, _NextHealth)
AND
_NextHealth > 1.0
THEN
SetStoryEvent(_Caster, "Mimicry_Events_Wish_UsedSkill");
DB_LLMIME_Skills_Temp_NextWish(_Caster, (CHARACTERGUID)_Target);

PROC
LLMIME_Skills_OnSkillUsed((CHARACTERGUID)_Caster, (GUIDSTRING)_Target, "Wish")
AND
ObjectIsCharacter((CHARACTERGUID)_Target, 1)
AND
NOT DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target)
THEN
DB_LLMIME_Skills_Temp_FailedWish(_Caster);

IF
SkillCast(_Caster, "Target_LLMIME_Wish", _, _)
THEN
LLMIME_Skills_OnSkillCast(_Caster, "Wish");

IF
SkillCast(_Caster, "Target_LLMIME_Wish_Follower", _, _)
THEN
LLMIME_Skills_OnSkillCast(_Caster, "Wish");

PROC
LLMIME_Skills_OnSkillCast((CHARACTERGUID)_Character, "Wish")
AND
DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_Caster, _Target);
SetVarFloat(_Caster, "Mimicry_Wish_HealPercentage", 0.50);
CharacterCharacterSetEvent(_Caster, _Target, "Mimicry_Events_OnWishCast");
SetStoryEvent(_Target, "Mimicry_Events_Wish_SkillCast");

PROC
LLMIME_Skills_OnSkillCast((CHARACTERGUID)_Character, "Wish")
AND
DB_LLMIME_Skills_Temp_FailedWish(_Caster)
THEN
NOT DB_LLMIME_Skills_Temp_FailedWish(_Caster);
CharacterStatusText(_Caster, "LLMIME_StatusText_WishFailed");

IF
CharacterCharacterEvent(_Caster, _Target, "Mimicry_Events_WishDelay")
AND
NOT DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _)
AND
GetUUID(_Caster, _CasterID)
AND
StringConcatenate("LLMIME_Timers_WishDelayTimer_", _CasterID, _TimerName)
THEN
DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _TimerName);
TimerLaunch(_TimerName, 500);

IF
TimerFinished(_TimerName)
AND
DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _TimerName)
THEN
NOT DB_LLMIME_Skills_WishDelayTimer(_Caster, _Target, _TimerName);
CharacterCharacterSetEvent(_Caster, _Target, "Mimicry_Events_HealWishTarget");
//END_REGION

//REGION MUGGING
QRY
LLMIME_Skills_QRY_CanMugCharacter((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_DisabledCharacter(_Character, _)
THEN
DB_NOOP(1);

/* [OSITOOLS_ONLY]
QRY
LLMIME_Skills_QRY_CanMugCharacter((CHARACTERGUID)_Character)
AND
GetUUID(_Character, _UUID)
AND
NRD_ModQuery1("Mimicry", "CanMugTarget", _UUID)
THEN
DB_NOOP(1);
*/

IF
CharacterStatusApplied(_Target, "LLMIME_MUGGED", (CHARACTERGUID)_Mime)
AND
LLMIME_Skills_QRY_CanMugCharacter(_Target)
THEN
LLMIME_Skills_MugCharacter(_Mime, _Target);

/* [OSITOOLS_ONLY]
PROC
LLMIME_Skills_MugCharacter((CHARACTERGUID)_Mime, (CHARACTERGUID)_Target)
AND
NRD_IsModLoaded(c60718c3-ba22-4702-9c5d-5ad92b41ba5f, 1)
THEN
LLMIME_Skills_MugCharacter_WeaponExpansion(_Mime, _Target);
*/

PROC
LLMIME_Skills_MugCharacter_WeaponExpansion((CHARACTERGUID)_Mime, (CHARACTERGUID)_Target)
AND
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime)
AND
CharacterGetEquippedWeapon(_Target, _Weapon)
AND
_Weapon != NULL_00000000-0000-0000-0000-000000000000
AND
GetTemplate(_Weapon, _Template)
AND
DB_LLMIME_Skills_StealWeapon(_String, _ThrowingItemTemplate)
AND
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime)
AND
StringContains(_Template, _String, 1)
THEN
ItemTemplateAddTo(_ThrowingItemTemplate, _Mime, 1, 1);
DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime);

//No match
PROC
LLMIME_Skills_MugCharacter_WeaponExpansion((CHARACTERGUID)_Mime, (CHARACTERGUID)_Target)
AND
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime)
AND
DB_LLMIME_Skills_StealWeapon("Rock", _ThrowingItemTemplate)
THEN
ItemTemplateAddTo(_ThrowingItemTemplate, _Mime, 1, 1);
DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime);

PROC
LLMIME_Skills_MugCharacter((CHARACTERGUID)_Mime, (CHARACTERGUID)_Target)
AND
NOT DB_IsPlayer(_Target)
AND
CharacterGetLevel(_Mime, _Level)
AND
LeaderLib_Random_QRY(15)
AND
DB_LeaderLib_Random(_Ran)
AND
IntegerSum(_Ran, 5, _GoldMult)
AND
IntegerProduct(_Level, _GoldMult, _Gold)
THEN
NOT DB_LeaderLib_Random(_Ran);
CharacterAddGold(_Mime, _Gold);

//Player mugging another player
PROC
LLMIME_Skills_MugCharacter((CHARACTERGUID)_Mime, (CHARACTERGUID)_Target)
AND
CharacterIsPlayer(_Target, 1)
AND
CharacterGetGold(_Target, _Gold)
AND
LeaderLib_Random_QRY(7, 12)
AND
DB_LeaderLib_Random(_DivideBy)
AND
IntegerDivide(_Gold, _DivideBy, _GainGold)
AND
_GainGold > 0
AND
IntegerProduct(_GainGold, -1, _RemoveGold)
THEN
NOT DB_LeaderLib_Random(_DivideBy);
CharacterAddGold(_Mime, _GainGold);
CharacterAddGold(_Target, _RemoveGold);
LeaderLog_Internal_LogToCombatLog(_Mime, "LLMIME_CombatLog_MimeMuggedPlayer");
LeaderLog_Internal_LogToCombatLog(_Target, "LLMIME_CombatLog_PlayerMuggedByMime");

IF
CharacterStatusApplied(_Target, "LLMIME_MUGGED", (CHARACTERGUID)_Mime)
THEN
CharacterCharacterSetEvent(_Mime, _Target, "Mimicry_OnCharacterMugged");

IF
CharacterStatusApplied(_Target, "LLMIME_MUGGED", (CHARACTERGUID)_Mime)
AND
DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime)
THEN
NOT DB_LLMIME_Skills_Temp_WeaponMatch(_Target, _Mime);

/*
IF
SkillCast(_Mime, _Skill, _, _)
AND
DB_LLMIME_Skills_StealWeapon(_String, _Skill)
THEN
CharacterRemoveSkill(_Mime, _Skill);
*/

IF
RegionEnded(_)
AND
DB_LLMIME_Skills_Temp_DisabledCharacter(_Character, _Status)
THEN
NOT DB_LLMIME_Skills_Temp_DisabledCharacter(_Character, _Status);

//END_REGION

//REGION PERFECT_DOPPELGANGER
IF
CharacterUsedSkillOnTarget(_Mime, (CHARACTERGUID)_Target, "Target_LLMIME_PerfectDoppelganger", _, _)
THEN
DB_LLMIME_Skills_Temp_DoppelgangerTarget(_Mime, _Target);

IF
CharacterStatusApplied(_Mime, "LLMIME_DOPPELGANGER", _)
AND
DB_LLMIME_Skills_Temp_DoppelgangerTarget(_Mime, _Target)
AND
GetPosition(_Target, _x, _y, _z)
AND
FindValidPosition(_x, _x, _z, 10.0, _Mime, _tx, _ty, _tz)
AND
GetTemplate(_Target, _Template)
AND
GetFaction(_Mime, _Faction)
AND
CombatGetIDForCharacter(_Mime, _CombatID)
AND
TemporaryCharacterCreateAtPosition(_tx, _ty, _tz, _Template, 0, _Doppelganger)
THEN
NOT DB_LLMIME_Skills_Temp_DoppelgangerTarget(_Mime, _Target);
DB_LLMIME_Skills_Temp_Doppelganger(_Mime, _Doppelganger);
ObjectSetFlag(_Doppelganger, "LEADERLIB_IGNORE", 0);
CharacterTransformFromCharacter(_Doppelganger, _Target, 1, 1, 1, 1, 1, 1, 1);
SetTag(_Mime, "AI_IGNORED_TARGET");
SetFaction(_Doppelganger, _Faction);
CharacterAddToPlayerCharacter(_Doppelganger, _Mime);
ApplyStatus(_Doppelganger, "LLMIME_DOPPELGANGER_EFFECT", 12.0, 1, _Mime);
EnterCombat(_Doppelganger, _Target);
JumpToTurn(_Doppelganger);
MakePlayerActive(_Doppelganger);

IF
CharacterStatusRemoved(_Mime, "LLMIME_DOPPELGANGER", _)
THEN
ClearTag(_Mime, "AI_IGNORED_TARGET");
LLMIME_Skills_OnDoppelgangerFinished(_Mime);

IF
CharacterDied(_Doppelganger)
AND
DB_LLMIME_Skills_Temp_Doppelganger(_Mime, _Doppelganger)
THEN
LLMIME_Skills_OnDoppelgangerFinished(_Mime);

PROC
LLMIME_Skills_OnDoppelgangerFinished((CHARACTERGUID)_Mime)
AND
DB_LLMIME_Skills_Temp_Doppelganger(_Mime, _Doppelganger)
THEN
NOT DB_LLMIME_Skills_Temp_Doppelganger(_Mime, _Doppelganger);
CharacterRemoveFromPlayerCharacter(_Doppelganger, _Mime);
SetOnStage(_Doppelganger, 0);
ProcObjectTimer(_Doppelganger, "LLMIME_Timers_RemoveDoppelganger");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Doppelganger, "LLMIME_Timers_RemoveDoppelganger")
THEN
RemoveTemporaryCharacter(_Doppelganger);
//END_REGION

//REGION FORCED_EVOLUTION
IF
CharacterUsedSkill(_Summon, "Shout_LLMIME_ForcedEvolution", _SkillType, _SkillElement)
AND
GetPosition(_Summon, _x, _y, _z)
THEN
ClearTag(_Summon, "INCARNATE_S");
SetTag(_Summon, "INCARNATE_G");
PlayEffectAtPosition("RS3_FX_Skills_Voodoo_Cast_Curse_Shout_Root_01", _x, _y, _z);
//RS3_FX_Skills_Voodoo_Cast_Curse_Shout_Root_01;RS3_FX_Skills_Voodoo_Cast_Taunt_Icon_01:Dummy_OverheadFX:shout
PlayEffect(_Summon, "LLMIME_FX_Status_ForcedEvolution_Disappear_01");

IF
SkillCast(_Summon, "Shout_LLMIME_ForcedEvolution", _SkillType, _SkillElement)
THEN
LeaderLib_Timers_StartObjectTimer(_Summon, 1200, "LLMIME_Timers_ForcedEvolution_PostTransform", "Mimicry_ForcedEvolution_TransformDone");

IF
StoryEvent((CHARACTERGUID)_Summon, "Mimicry_ForcedEvolution_TransformDone")
THEN
CharacterRemoveSkill(_Summon, "Shout_LLMIME_ForcedEvolution");

PROC
LLMIME_Skills_EvolveIncarnateBuffs((CHARACTERGUID)_Owner, (CHARACTERGUID)_Summon)
AND
DB_LLMIME_Skills_IncarnateInfusions(_SmallStatus, _LargeStatus)
AND
HasActiveStatus(_Summon, _SmallStatus, 1)
AND
HasActiveStatus(_Summon, _LargeStatus, 0)
AND
GetStatusTurns(_Summon, _SmallStatus, _Turns)
AND
Real(_Turns, _TurnsR)
AND
RealProduct(_TurnsR, 6.0, _Duration)
THEN
ApplyStatus(_Summon, _LargeStatus, _Duration, 0, _Owner);

IF
StoryEvent((CHARACTERGUID)_Summon, "Mimicry_ForcedEvolution_TransformDone")
AND
GetVarObject(_Summon, "LLMIME_Beastmaster", (CHARACTERGUID)_Mime)
THEN
ApplyStatus(_Summon, "LLMIME_FORCED_EVOLUTION", 6.0, 0, _Summon);
LLMIME_Beastmaster_RemoveBeastmasterBonus(_Summon);
DB_LLMIME_SKills_ForcedEvolution_Beastmaster(_Summon, _Mime);

IF
CharacterStatusApplied(_Summon, "LLMIME_FORCED_EVOLUTION", _Summoner)
AND
GetPosition(_Summon, _x, _y, _z)
AND
DB_LLMIME_SKills_ForcedEvolution_Beastmaster(_Summon, _Mime)
AND
CharacterGetOwner(_Summon, _Owner)
THEN
NOT DB_LLMIME_SKills_ForcedEvolution_Beastmaster(_Summon, _Mime);
ClearTag(_Summon, "INCARNATE_S");
SetTag(_Summon, "INCARNATE_G");
LLMIME_Skills_EvolveIncarnateBuffs(_Owner, _Summon);
PlayScaledEffectAtPosition("RS3_FX_Elven_Pillar_Explosion", 0.5, _x, _y, _z);
SetStoryEvent(_Summon, "Mimicry_SummonEvolved");
LeaderLib_Timers_StartCharacterCharacterTimer(_Summon, _Mime, 150, "LLMIME_Timers_ReapplyBeastmaster_", "LLMIME_ForcedEvolution_ReapplyBeastmaster");

IF
CharacterCharacterEvent(_Summon, _Mime, "LLMIME_ForcedEvolution_ReapplyBeastmaster")
THEN
LLMIME_Beastmaster_ApplyBeastmasterBonus(_Summon, _Mime);

IF
CharacterStatusRemoved(_Summon, "LLMIME_FORCED_EVOLUTION", _)
AND
CharacterIsSummon(_Summon, 1)
THEN
CharacterDie(_Summon, 0, "LifeTime", _Summon);
//END_REGION

//REGION CLEAR_TEMP_DATA
IF
CharacterDied(_Character)
AND
DB_LLMIME_Skills_Temp_NextWish(_Character, _Target)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_Character, _Target);
LLMIME_Skills_ClearTemporaryDatabases(_Character);

PROC
LLMIME_Skills_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_NextWish(_Character, _Target)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_Character, _Target);

PROC
LLMIME_Skills_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_NextWish(_OtherCharacter, _Character)
THEN
NOT DB_LLMIME_Skills_Temp_NextWish(_OtherCharacter, _Character);

PROC
LLMIME_Skills_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_Temp_FailedWish(_Character)
THEN
NOT DB_LLMIME_Skills_Temp_FailedWish(_Character);

PROC
LLMIME_Skills_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_WishDelayTimer(_Character, _Target, _TimerName)
THEN
NOT DB_LLMIME_Skills_WishDelayTimer(_Character, _Target, _TimerName);
TimerCancel(_TimerName);

PROC
LLMIME_Skills_ClearTemporaryDatabases((CHARACTERGUID)_Character)
AND
DB_LLMIME_Skills_WishDelayTimer(_Caster, _Character, _TimerName)
THEN
NOT DB_LLMIME_Skills_WishDelayTimer(_Caster, _Character, _TimerName);
TimerCancel(_TimerName);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Mimicry"
